
TODO
- [ ] Add × ÷ to * and / with shifted
- [ ] Remove - = × ÷ from layer two and add movement from new MV layer to try out here
- [ ] Add combos for common symbols

** Layout
#+name: layout
#+begin_src keymap :tangle layout.txt
 ╭────────────────────────────────────────────────────────────────╮
 │TAB   q    w    e    r    t        y    u    i    o    p    BS  │
 │CTL  󰘵a   s   󰘳d   󰘴f    g        h   󰘴j   󰘳k   l   󰘵:;   RET │
0│SFT   z    x    c    v    b        n    m    ,    .    /?   ;   │
 │                    FN    󰆢       NEW   󰆢                       │
 │          OPT  CMD  NUM  MOV       󰆢    󱁐   PAR   󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ ~    !    @    #    $    %        ^    7    8    9    °    BS  │
 │ 󰆢    "    &    *    _    0        +    4    5    6    '    |   │
1│ 󰆢    󰆢    󰆢    =    -    .        󰆢    1    2    3    /    󰆢   │
 │                     󰆢    󰆢        󰆢    󰆢                       │
 │          OPT  CMD       󰆢        󰆢    󱁐    󰆢    󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ `    ‘    ’    “    ”    󰆢        󰆢    ×    ÷    󰆢    󰆢    BS  │
 │ ′    [    ]    (    )    󰆢        󰆢    -    =    󰆢    󰆢    \   │
2│ ″    <    >    {    }    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰆢   │
 │                     󰆢    󰆢        󰆢    󰆢                       │
 │          OPT  CMD   󰆢    󰆢        󰆢    󰆢        󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ESC   󰆢    󰆢   ¶←   ¶→    󰆢        󰆢   P↑    ↑   P↓    󰆢    󰆢   │
 │ 󰆢    󰆢    󰆢   W←   W→    󰆢        󰆢    ←    ↓    →    󰞷    󰆢   │
3│ 󰆢    󰆢    󰆢    󰆢    󰆢    󰆢        󰆢   HME   󰆢   END   󰆢    󰆢   │
 │                     󰆢    󰆢        󰆢    󰆢                       │
 │          OPT  CMD  NUM           󰆢    󰆢    󰆢    󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦   ESC  F1   F2   F3   F4       F5   F6   F7   F8   F9    󰿦   │
 │ 󰿦    󰆢    󰆢    󰅗    󰍵    󰆢        󰆢    󰇽    󰿋    󰆢    󰆢    󰿦   │
4│ 󰿦   F10  F11  F12  F13  F14      F15  F16  F17  F18  F19   󰿦   │FN
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │           󰿦    󰆢    󰆢    󰆢        󰆢    󰆢    󰆢    󰿦             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰆢    󰆢    󰆢    ╭    ╮    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰆢   │
 │ 󰆢    ─    │    ╰    ╯    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰆢   │
5│ 󰆢    ┼    ┴    ┬    ┤    ├        󰆢    󰆢    󰆢    󰆢    󰆢    󰆢   │
 │                     󰆢    󰆢        󰆢    󰆢                       │
 │          OPT  CMD   󰆢    󰆢        󰆢    󰆢    󰆢    󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦    q    w    e    r    t        y    u    i    o    p     󰿦  │
 │ 󰿦   󰘵a   s   󰘳d   󰘴f    g        h   󰘴j   󰘳k   l   󰘵:;    󰿦  │
6│ 󰿦    z    x    c    v    b        n    m    ,    .!   /?    󰿦  │NEW
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │           󰿦   NM    󰘶   BS       RET   󱁐T  MV    󰿦             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦    “    ”    ‘    ’    "″       󰆢    󰞕    ↑    󰞒    󰆢    󰿦   │
 │ 󰿦    [    ]    (    )    '′       󰆢    ←    ↓    →    󰞷    󰿦   │
7│ 󰿦    <    >    {    }    `        󰆢    󰞓    󰆢    󰞔    󰆢    󰿦   │MV
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │           󰿦    󰆢    󰘶   BS       RET   󱁐        󰿦             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦    ~    @    #    $    %        ^    &    |    °    \    󰿦   │
 │ 󰿦    0    1    2    3    4        5    6    7    8    9    󰿦   │
8│ 󰿦    󰆢    󰆢    *    +    =        _    -    ,    .    /    󰿦   │NM
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │           󰿦        󰘶   BS       RET   󱁐   FN    󰿦             │
 ╰────────────────────────────────────────────────────────────────╯
#+end_src

*** Generate layer definitions
#+name: layer-definitions
#+begin_src python :var lines=layout :results output :var keycodes=keycodes-table[]
import re, unicodedata
splitup = re.findall(r'\n?(.╭─+╮.+?╰─+╯)\w*', lines, re.S)
vmid = lambda t: t.split('\n')[1:-1]
hmid = lambda s: re.match(r'.*│(.+)│.*', s).group(1)
insides = [' '.join([hmid(s) for s in vmid(t)]) for t in splitup]
keycodes = dict(k.split('\t') for k in keycodes.splitlines())
for i, layer in enumerate(insides):
    codes = ' '.join([keycodes[k] for k in layer.split()])
    print(f"ZMK_LAYER(layer_{i}, {codes})")
#+end_src

** Keymap Template
#+name: zmk-keymap
#+begin_src dts :noweb yes :tangle config/andean-condor.keymap
// -*- mode: dts; tab-width: 2; -*-
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#define HOST_OS 2
#include "zmk-helpers/helper.h"

<<unicode()>>

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

ZMK_COMBO(combo_caps_word, &caps_word, 17 20, ALL, 25)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: colon | shift + tap: semicolon
SIMPLE_MORPH(colonsemi, SFT, &kp COLON, &kp SEMI)

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29   // left hand
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 // right hand
#define THUMBS 36 37 38 39 40 41 42 43 44 45 46 47               // thumbs
#define QUICK_TAP_MS 175

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

//MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
//MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
//MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

<<layer-definitions()>>

#+end_src

** Unicode
#+name: unicode
#+begin_src python :var codes=unicode-table[] :results output
import unicodedata
for s in codes.splitlines():
    ch, name = s.strip().split('\t')
    hh = ', '.join([f'N{h}' if h in '0123456789' else f' {h}' for h in f'{ord(ch):04X}'])
    print(f'ZMK_UNICODE_SINGLE({name+",":26} {hh})   // {ch}  {unicodedata.name(ch)}')


#+end_src

#+name: unicode-table
#+begin_src tsv
€	euro_sign
°	degree_symbol
′	prime
″	double_prime
–	en_dash
—	em_dash
‣	triangular_bullet
‘	left_single_quote
’	right_single_quote
“	left_double_quote
”	right_double_quote
×	multiplication_sign
÷	division_sign
∀	for_all
∃	there_exists
∅	empty_set
∈	element_of
∎	qed_motherfucker
∏	product
∑	sum
∘	ring
∝	proportional
∞	infinity
∧	logical_and
∨	logical_or
∩	intersection
∪	union
≈	almost_equal
≤	less_than_or_equal
≥	greater_than_or_equal
≡	identical_to
╭	box_upperleft
╮	box_upperright
╯	box_lowerright
╰	box_lowerleft
─	box_horizontal
│	box_vertical
┼	box_middle
┴	box_middlebottom
┬	box_middletop
┤	box_middleright
├	box_middleleft
#+end_src

** Keycodes

Typing =C-q TAB= will insert a tab literal.

#+name: keycodes-table
#+begin_src tsv
0	&kp N0
1	&kp N1
2	&kp N2
3	&kp N3
4	&kp N4
5	&kp N5
6	&kp N6
7	&kp N7
8	&kp N8
9	&kp N9
b	&kp B
c	&kp C
e	&kp E
g	&kp G
h	&kp H
i	&kp I
m	&kp M
n	&kp N
o	&kp O
p	&kp P
q	&kp Q
r	&kp R
t	&kp T
u	&kp U
v	&kp V
w	&kp W
x	&kp X
y	&kp Y
z	&kp Z
F1	&kp F1
F2	&kp F2
F3	&kp F3
F4	&kp F4
F5	&kp F5
F6	&kp F6
F7	&kp F7
F8	&kp F8
F9	&kp F9
F10	&kp F10
F11	&kp F11
F12	&kp F12
F13	&kp F13
F14	&kp F14
F15	&kp F15
F16	&kp F16
F17	&kp F17
F18	&kp F18
F19	&kp F19
CTL	&kp LCTRL
OPT	&kp RALT
CMD	&kp LCMD
.!	&dotbang
,	&kp COMMA
.	&kp DOT
󱁐	&kp SPACE
󱁐T	&spacetab
TAB	&kp TAB
RET	&kp RET
ESC	&kp ESC
BS	&kp BSPC
/	&kp SLASH
/?	&kp SLASH
~	&kp TILDE
^	&kp CARET
'	&kp SQT
%	&kp PERCENT
|	&kp PIPE
_	&kp UNDER
+	&kp PLUS
"	&kp DQT
"″	&doublequoteprime
'′	&singlequoteprime
$	&kp DLLR
&	&kp AMPS
@	&kp AT
!	&kp EXCL
#	&kp HASH
)	&kp RPAR
\	&kp BACKSLASH
=	&kp EQUAL
}	&kp RBRC
`	&kp GRAVE
[	&kp LBKT
>	&kp GT
(	&kp LPAR
-	&kp MINUS
]	&kp RBKT
<	&kp LT
{	&kp LBRC
;	&kp SEMI
:;	&colonsemi
→	&kp RIGHT
←	&kp LEFT
↓	&kp DOWN
↑	&kp UP
HME	&kp HOME
END	&kp END
P↑	&kp PGUP
P↓	&kp PGDN
.!	&kp DOT
/?	&kp SLASH
󰘶	&kp LSHIFT
󱁐T	&kp SPACE
"″	&kp DQT
'′	&kp SQT
󰞕	&kp PGUP
󰞒	&kp PGDN
󰞓	&kp HOME
󰞔	&kp END
W←	&kp LG(B)
W→	&kp LG(F)
λ←	&kp LC(LG(B))
λ→	&kp LC(LG(F))
¶←	&kp LG(LBRC)
¶→	&kp LG(RBRC)
S←	&kp LG(A)
S→	&kp LG(E)
UND	&kp LC(SLASH)
BEG	&kp LG(M)
󰞷	&kp LG(M)
Bu0	&kp LC(LG(N0))
Bu1	&kp LC(LG(N1))
Bu2	&kp LC(LG(N2))
Bu3	&kp LC(LG(N3))
󰅗	&kp LC(LG(N0))
󰍵	&kp LC(LG(N1))
󰇽	&kp LC(LG(N2))
󰿋	&kp LC(LG(N3)) 
OTH	&kp LG(O)
FLP	&kp LS(LG(O))
󰿦	&none
󰆢	&none
	&trans
M₀!	&tog 0
QUE	&tog 0
M₁	&mo 1
NUM	&mo 1
SFT	&smart_shft
M₂	&mo 2
PAR	&mo 2
M₃	&mo 3
MOV	&mo 3
M₄	&mo 4
FUN	&mo 4
M₅	&mo 5
LIN	&mo 5
NEW	&to 6
MV	&mo 7
NM	&mo 8
FN	&mo 9
BTC	&bt BT_CLR
BT1	&bt BT_SEL 0
BT2	&bt BT_SEL 1
BT3	&bt BT_SEL 2
BT4	&bt BT_SEL 3
RST	&sys_reset
USB	&bootloader
󰘵a	&hml LALT A
s	&hml LS(LC(LALT)) S
󰘳d	&hml LCMD D
󰘴f	&hml LCTRL F
󰘴j	&hmr RCTRL J
󰘳k	&hmr RCMD K
l	&hmr LS(LC(LALT)) L
󰘵:;	&hmr RALT COLON
°	&degree_symbol
′	&prime
″	&double_prime
–	&en_dash
—	&em_dash
‣	&triangular_bullet
‘	&left_single_quote
’	&right_single_quote
“	&left_double_quote
”	&right_double_quote
×	&multiplication_sign
÷	&division_sign
∀	&for_all
∃	&there_exists
∅	&empty_set
∈	&element_of
∉	&not_element_of
∎	&qed_motherfucker
∏	&product
∑	&sum
∘	&ring
∝	&proportional
∞	&infinity
∧	&logical_and
∨	&logical_or
∩	&intersection
∪	&union
≈	&almost_equal
≤	&less_than_or_equal
≥	&greater_than_or_equal
≡	&identical_to
≢	&not_identical_to
╭	&box_upperleft
╮	&box_upperright
╯	&box_lowerright
╰	&box_lowerleft
─	&box_horizontal
│	&box_vertical
┼	&box_middle
┴	&box_middlebottom
┬	&box_middletop
┤	&box_middleright
├	&box_middleleft
*	&kp STAR
#+end_src

** Status Viewer

#+name: status.py
#+begin_src python :tangle status.py :results value pp
import json, subprocess, serial, re, rich, rich.console, os
from copy import copy
updated = os.stat('layout.txt').st_mtime
from pprint import pprint as pp
from more_itertools import chunked
layers = list(chunked(open('layout.txt').read().split('\n'), 7))
layers = ['\n'.join(l) for l in layers]
layers = [re.sub(r'([│╰╯─╭╮]+)', r'[bold turquoise2]\1[/]', layer) for layer in layers]
layers = [re.sub(r'([󰆢])', r'[dim]\1[/]', layer) for layer in layers]

modifiers = {
    'shift': {
        ' ([abcdefghijklmnopqrstuvwxyz]) ': lambda m: f' {m.group(1).upper()} ',
    },
    'command': {
    },
    'control': {},
    'option': {},
}

# Cool colors:
#    [cyan]
#    [bold cyan]
#    [bold magenta1]
#    [bold green1]
#    [bold turquoise2]
#    [turquoise2]

def msb(n):
    "What is the most significant bit set (also, what is the highest layer set)"
    if not n:
        return 0
    i = 0
    while n:
        n = n >> 1
        i += 1
    return i - 1

p = subprocess.run(['/Users/guido/miniforge3/bin/discotool', 'json'], capture_output=True)
devs = json.loads(p.stdout)
#path = [d['ports'][0]['dev'] for d in devs if '23C7B91420F266DF' == d['serial_num']][0]
path = [d['ports'][0]['dev'] for d in devs if 'DF6114B5C3791031' == d['serial_num']][0]
ser = serial.Serial(path)
con = rich.console.Console(highlight=False)
con.show_cursor(False)
layer = ''
shortcuts = {
    'C-:    ': 'avy-goto-char',
    'C-h m  ': 'describe-mode',
    'C-h k  ': 'describe-key',
    'C-h i  ': 'info',
    'C-h l  ': 'view-lossage',
    'C-x C-x': 'exchange-point-and-mark',
    'C-c ←  ': 'winner-undo',
    'M-o    ': 'other-window',
    'C-c M-o': 'comint-clear-buffer',
}

while s := ser.readline():
    # zmk: set_layer_state: layer_changed: layer 3 state 0
    # GUIDO: layer 4, new state set: 16
    if m := re.search(r'GUIDO: layer (\d+), new state set: (\d+)', s.decode()):
        state = int(m.group(2))
        n = msb(state)
        layer = layers[n]
        con.clear()
        con.print(layer)
        con.print('\n'.join((f'{k}  {v}' for k, v in shortcuts.items())))

        if os.stat('layout.txt').st_mtime > updated:
            updated = os.stat('layout.txt').st_mtime
            layers = json.load(open('layout.txt'))

    if m := re.search(r'GUIDO: Modifiers set to 0x(\d\d)', s.decode()):
        mods = int(m.group(1), 16)

        modified = copy(layer)
        modline = []
        
        if mods & 0x01:
            modifiers['control']
            modline.append('^')
        if mods &0x02:
            for a, b in modifiers['shift'].items():
                modified = re.sub(a, b, modified)
            modline.append('⇧')
        if mods & 0x04:
            modifiers['option']
            modline.append('⌥')
        if mods & 0x08:
            modifiers['command']
            modline.append('⌘')
        if mods & 0x10:
            modifiers['control']
            modline.append('^')
        if mods &0x20:
            modifiers['shift']
            modline.append('⇧')
        if mods & 0x40:
            modifiers['option']
            modline.append('⌥')
        if mods & 0x80:
            modifiers['command']
            modline.append('⌘')
        #con.clear()
        #con.print(modified)
        #if modline:
        #    con.print(''.join(modline), justify="center")
        #else:
        #    con.print('---', justify="center")
    #else:
    #    con.print('---', justify="center")

    
#+end_src

