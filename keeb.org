
To build:
 1. =C-c C-v t= to tangle
 2. Commit and push

Remember that =x= is the *ring finger* and =c= is the middle finger.

- [ ] Figure out how to quick move around words and paragraphs
- [ ] Fix status.py to not crash during bootstrap mode
- [ ] Add command to run within emacs that tells status.py to show shortcut
- [ ] Change status.py to show combos when a certain key is pressed
- [ ] Make way to memorize keystrokes with spaced-repetition
- [X] Add new layer using same thumbs as function layer
  
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦    q    w    e    r    t        y    u    i    o    p    BS  │
 │ 󰿦   󰘵a   s   󰘳d   󰘴f    g        h   󰘴j   󰘳k   l    :;   󰿦   │
X│ 󰿦    z    x   󰞓─TAB─󰞔    b        n    󰞓─RET─󰞔   .    /?   ;   │
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │           󰿦   SFT  NUM  MOV       󰆢    󱁐   SYM   󰿦             │
 ╰────────────────────────────────────────────────────────────────╯
                      󰞓─  one shot shift ─󰞔


** Totem Changes
#+name: layout-totem-changes
#+begin_src keymap
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦                                                󰿦   │
0│TAB                                              RET  │
 │ 󰿦                                                󰿦   │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦                                                󰿦   │
1│ ~                                                |   │NUM
 │ 󰿦                                                󰿦   │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦                                                󰿦   │
2│ 󰿦                                                \   │SYM
 │ 󰿦                                                󰿦   │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦                                                󰿦   │
3│ 󰿦                                               BS   │MOV
 │ 󰿦                                                󰿦   │
 ╰────────────────────────────────────────────────────────────────╯
#+end_src


** Layout
#+name: layout
#+begin_src keymap :tangle layout.txt
 ╭────────────────────────────────────────────────────────────────╮
 │TAB   q    w    e    r    t        y    u    i    o    p    BS  │
 │CTL  󰘵a   󰆾s   󰘳d   󰘴f    g        h   󰘴j   󰘳k   l    :;  RET  │
0│SFT   z    x    c    v    b        n    m    ,    .    /?   󰿦   │
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │           󰿦   CMD  NUM  MOV      SEL  󰘶󱁐   SYM   󰿦             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ ~    !    @    #    $    %        ^    7    8    9    °    BS  │
 │ 󰆢    "    &    *    _    0        +    4    5    6    '    |   │
1│ 󰆢    ×    ÷    =    -    .        󰆢    1    2    3    /    󰆢   │NUM
 │                     󰆢    󰆢        󰆢    󰆢                       │
 │          OPT  CMD       󰆢        󰆢   󰘶󱁐    󰆢    󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦    “    ”    ‘    ’    ″        µ    Ω    󰆢    󰆢    󰆢    BS  │
 │ 󰿦    [    ]    (    )    ′       TAB   -    =    BS  RET   \   │
2│ 󰿦    <    >    {    }    `        󰆢    󰆢    󰆢    󰆢    󰆢    󰿦   │SYM
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │          OPT  FN    󰆢    󰆢        󰆢   󰘶󱁐        󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ESC   󰆢    󰆢   ¶←   ¶→    󰆢        󰆢   P↑    ↑   P↓    󰆢    󰆢   │
 │ 󰆢    󰆢    󰆢   W←   W→    󰆢        󰆢    ←    ↓    →    󰞷    󰆢   │
3│ 󰆢    󰆢    󰆢    󰆢    󰆢    󰆢        󰆢   HME   󰆢   END   󰆢    󰆢   │MOV
 │                     󰆢    󰆢        󰆢    󰆢                       │
 │          OPT  CMD  NUM          GAM  󰘶󱁐    󰆢    󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦   ESC   q    w    e    r        y    u    ↑    o    p   GAM  │
 │ 󰿦   TAB   a    s    d    f        g    ←    ↓    →    i   RET  │
4│ 󰿦    l    z    x    c    v        b    n    m    h    j    k   │GAM
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │          OPT  SFT   󱁐    󰆢        󰆢    󰆢    󰆢    󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦    󰆢    󰆢    󰆢    󰆢    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰿦   │
 │ 󰿦    󰆢    󰆢    󰆢    󰆢    󰆢       BOX   󰆢    󰆢    󰆢    󰆢    󰿦   │
5│ 󰿦    󰆢    󰆢    󰆢    󰆢    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰿦   │SEL
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │           󰆢        󰆢    󰆢        󰆢    󰆢        󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦    󰆢    󰆢    󰆢    󰆢    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰿦   │
 │ 󰿦    󰆢    f    r    e    e        󰆢    󰆢    󰆢    󰆢    󰆢    󰿦   │
6│ 󰿦    󰆢    󰆢    󰆢    󰆢    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰿦   │
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │           󰆢    󰆢    󰆢    󰆢        󰆢    󰆢    󰆢    󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦    󰆢    󰆢    󰆢    󰆢    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰿦   │
 │ 󰿦    󰆢    󰆢    󰆢    󰆢    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰿦   │
7│ 󰿦    󰆢    󰆢    󰆢    󰆢    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰿦   │
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │           󰆢    󰆢    󰆢    󰆢        󰆢    󰆢    󰆢    󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰆢    󰆢    󰆢    ╭    ╮    󰆢        󰆢    󰆢    󰆢    󰆢    󰆢    󰆢   │
 │ 󰆢    ─    │    ╰    ╯    󰆢       BOX   󰆢    󰆢    󰆢    󰆢    󰆢   │
8│ 󰆢    ┼    ┴    ┬    ┤    ├        󰆢    󰆢    󰆢    󰆢    󰆢    󰆢   │BOX
 │                     󰆢    󰆢        󰆢    󰆢                       │
 │          OPT  CMD   󰆢    󰆢        󰆢    󰆢    󰆢    󰆢             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ 󰿦   ESC  F1   F2   F3   F4       F5   F6   F7   F8   F9    󰿦   │
 │ 󰿦    󰆢    󱢍    󰅗    󰍵    󰆢        󰆢    󰇽    󰿋    󱃗    󰆢    󰿦   │
9│ 󰿦   F10  F11  F12  F13  F14      F15  F16  F17  F18       󰿦   │FN
 │                     󰿦    󰿦        󰿦    󰿦                       │
 │           󰿦        󰆢    󰆢        󰆢    󰆢        󰿦             │
 ╰────────────────────────────────────────────────────────────────╯
#+end_src

*** Generate layer definitions
#+name: layer-definitions
#+begin_src python :var lines=layout :results output :var keycodes=keycodes-table[]
import re, unicodedata
splitup = re.findall(r'\n?(.╭─+╮.+?╰─+╯)\w*', lines, re.S)
vmid = lambda t: t.split('\n')[1:-1]
hmid = lambda s: s[2:66] # Or re.match(r'.*│(.+)│.*', s).group(1)
insides = [' '.join([hmid(s) for s in vmid(t)]) for t in splitup]
keycodes = dict(k.split('\t') for k in keycodes.splitlines())
for i, layer in enumerate(insides):
    codes = ' '.join([keycodes[k] for k in layer.split()])
    print(f"ZMK_LAYER(layer_{i}, {codes})")
#+end_src

** Keymap Template

#+name: zmk-keymap
#+begin_src dts :noweb yes
// -*- mode: dts; tab-width: 2; -*-
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#define HOST_OS 2
#include "zmk-helpers/helper.h"

<<unicode()>>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH0 LH1 LH2 LH3 LH4 LH5 RH0 RH1 RH2 RH3 RH4 RH5

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

ZMK_COMBO(combo_caps_word, &caps_word, 17 20, ALL, 25)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: colon | shift + tap: semicolon
SIMPLE_MORPH(colonsemi, SFT, &kp COLON, &kp SEMI)

#define QUICK_TAP_MS 175

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

ZMK_HOLD_TAP(hmlslow, 
    flavor = "balanced"; 
    tapping-term-ms = <280>; 
    quick-tap-ms = <280>; 
    require-prior-idle-ms = <150>; 
    bindings = <&kp>, <&kp>; 
    hold-trigger-key-positions = <KEYS_R THUMBS>; 
    hold-trigger-on-release; 
)

MAKE_HRM(hltl, &mo, &kp, KEYS_R THUMBS)  // left-hand HR layer-taps
MAKE_HRM(hltr, &mo, &kp, KEYS_L THUMBS)  // right-hand HR layer-taps

//MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
//MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
//MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

// tap: nothing | hold: symbol layer | cmd + hold: new layer
ZMK_MOD_MORPH(sym_layer6,
    bindings = <&mo 2>, <&mo 6>;
    mods = <(MOD_LGUI|MOD_RGUI)>;
)

ZMK_BEHAVIOR(flip_buffer, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp LC(X) &kp B &kp RET>;
)

// index on r u in FN layer within 100 milliseconds
ZMK_COMBO(startbootloader,  &bootloader, 4 7, 9, 100)

// GUIDO: This doesn't work because of the home-row-mods
// ZMK_COMBO(movelayer, &mo 7, 16 17, ALL, 50)

// TAB = C + V
ZMK_COMBO(tab_combo, &kp TAB, 27 28, ALL, 50)

// RET = M + ,
ZMK_COMBO(ret_combo, &kp RET, 31 32, ALL, 50)

// One-shot Shift = NUM + 󱁐
ZMK_COMBO(oneshot_space_combo, &sk LSHIFT, 42 45, ALL, 50)

#+end_src

*** Unibody Template
#+begin_src dts :noweb yes :tangle config/andean-condor.keymap

/*                                      48 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  │                 36     │     37                 │ │                 LH5     │     RH5                 │
  │         38  39  40  41 │ 42  43  44  45         │ │         LH3 LH2 LH1 LH0 │ RH0 RH1 RH2 RH3         │
  ╰────────────────────────┴────────────────────────╯ ╰─────────────────────────┴─────────────────────────╯ */

#define LT0  5  // left-top row
#define LT1  4
#define LT2  3
#define LT3  2
#define LT4  1
#define LT5  0

#define RT0  6  // right-top row
#define RT1  7
#define RT2  8
#define RT3  9
#define RT4 10
#define RT5 11

#define LM0 17  // left-middle row
#define LM1 16
#define LM2 15
#define LM3 14
#define LM4 13
#define LM5 12

#define RM0 18  // right-middle row
#define RM1 19
#define RM2 20
#define RM3 21
#define RM4 22
#define RM5 23

#define LB0 29  // left-bottom row
#define LB1 28
#define LB2 27
#define LB3 26
#define LB4 25
#define LB5 24

#define RB0 30  // right-bottom row
#define RB1 31
#define RB2 32
#define RB3 33
#define RB4 34
#define RB5 35

#define LH0 43  // left thumb keys
#define LH1 42
#define LH2 41
#define LH3 40
#define LH4 37
#define LH5 36

#define RH0 44  // right thumb keys
#define RH1 45
#define RH2 46
#define RH3 47
#define RH4 38
#define RH5 39

<<zmk-keymap>>
<<layer-definitions()>>

#+end_src

*** Split Template
#+begin_src dts :noweb yes :tangle config/andean_condor_split.keymap
/*                                      48 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  │                 36  37 │ 38  39                 │ │                 LH5 LH4 │ RH4 RH5                 │
  │         40  41  42  43 │ 44  45  46  47         │ │         LH3 LH2 LH1 LH0 │ RH0 RH1 RH2 RH3         │
  ╰────────────────────────┴────────────────────────╯ ╰─────────────────────────┴─────────────────────────╯ */

#define LT0  5  // left-top row
#define LT1  4
#define LT2  3
#define LT3  2
#define LT4  1
#define LT5  0

#define RT0  6  // right-top row
#define RT1  7
#define RT2  8
#define RT3  9
#define RT4 10
#define RT5 11

#define LM0 17  // left-middle row
#define LM1 16
#define LM2 15
#define LM3 14
#define LM4 13
#define LM5 12

#define RM0 18  // right-middle row
#define RM1 19
#define RM2 20
#define RM3 21
#define RM4 22
#define RM5 23

#define LB0 29  // left-bottom row
#define LB1 28
#define LB2 27
#define LB3 26
#define LB4 25
#define LB5 24

#define RB0 30  // right-bottom row
#define RB1 31
#define RB2 32
#define RB3 33
#define RB4 34
#define RB5 35

#define LH0 43  // left thumb keys
#define LH1 42
#define LH2 41
#define LH3 40
#define LH4 37
#define LH5 36

#define RH0 44  // right thumb keys
#define RH1 45
#define RH2 46
#define RH3 47
#define RH4 38
#define RH5 39

#+end_src




** Unicode
#+name: unicode
#+begin_src python :var codes=unicode-table[] :results output
import unicodedata
for s in codes.splitlines():
    ch, name = s.strip().split('\t')
    hh = ', '.join([f'N{h}' if h in '0123456789' else f' {h}' for h in f'{ord(ch):04X}'])
    print(f'ZMK_UNICODE_SINGLE({name+",":26} {hh})   // {ch}  {unicodedata.name(ch)}')


#+end_src

#+name: unicode-table
#+begin_src tsv
€	euro_sign
°	degree_symbol
′	prime
″	double_prime
–	en_dash
—	em_dash
‣	triangular_bullet
‘	left_single_quote
’	right_single_quote
“	left_double_quote
”	right_double_quote
×	multiplication_sign
÷	division_sign
∀	for_all
∃	there_exists
∅	empty_set
∈	element_of
∎	qed_motherfucker
∏	product
∑	sum
∘	ring
∝	proportional
∞	infinity
∧	logical_and
∨	logical_or
∩	intersection
∪	union
≈	almost_equal
≤	less_than_or_equal
≥	greater_than_or_equal
≡	identical_to
╭	box_upperleft
╮	box_upperright
╯	box_lowerright
╰	box_lowerleft
─	box_horizontal
│	box_vertical
┼	box_middle
┴	box_middlebottom
┬	box_middletop
┤	box_middleright
├	box_middleleft
Ω	ohm
µ	micro
#+end_src

** Keycodes

Typing =C-q TAB= will insert a tab literal.

#+name: keycodes-table
#+begin_src tsv
0	&kp N0
1	&kp N1
2	&kp N2
3	&kp N3
4	&kp N4
5	&kp N5
6	&kp N6
7	&kp N7
8	&kp N8
9	&kp N9
a	&kp A
b	&kp B
c	&kp C
d	&kp D
e	&kp E
f	&kp F
g	&kp G
h	&kp H
i	&kp I
j	&kp J
k	&kp K
l	&kp L
m	&kp M
n	&kp N
o	&kp O
p	&kp P
q	&kp Q
r	&kp R
s	&kp S
t	&kp T
u	&kp U
v	&kp V
w	&kp W
x	&kp X
y	&kp Y
z	&kp Z
F1	&kp F1
F2	&kp F2
F3	&kp F3
F4	&kp F4
F5	&kp F5
F6	&kp F6
F7	&kp F7
F8	&kp F8
F9	&kp F9
F10	&kp F10
F11	&kp F11
F12	&kp F12
F13	&kp F13
F14	&kp F14
F15	&kp F15
F16	&kp F16
F17	&kp F17
F18	&kp F18
F19	&kp F19
CTL	&kp LCTRL
OPT	&kp RALT
CMD	&kp LCMD
.!	&dotbang
,	&kp COMMA
.	&kp DOT
󱁐	&kp SPACE
󱁐T	&spacetab
TAB	&kp TAB
RET	&kp RET
ESC	&kp ESC
BS	&kp BSPC
/	&kp SLASH
/?	&kp SLASH
~	&kp TILDE
^	&kp CARET
'	&kp SQT
%	&kp PERCENT
|	&kp PIPE
_	&kp UNDER
+	&kp PLUS
"	&kp DQT
"″	&doublequoteprime
'′	&singlequoteprime
$	&kp DLLR
&	&kp AMPS
@	&kp AT
!	&kp EXCL
#	&kp HASH
)	&kp RPAR
\	&kp BACKSLASH
=	&kp EQUAL
}	&kp RBRC
`	&kp GRAVE
[	&kp LBKT
>	&kp GT
(	&kp LPAR
-	&kp MINUS
]	&kp RBKT
<	&kp LT
{	&kp LBRC
;	&kp SEMI
:;	&colonsemi
→	&kp RIGHT
←	&kp LEFT
↓	&kp DOWN
↑	&kp UP
HME	&kp HOME
END	&kp END
P↑	&kp PGUP
P↓	&kp PGDN
.!	&kp DOT
/?	&kp SLASH
󰘶	&kp LSHIFT
󱁐T	&kp SPACE
"″	&kp DQT
'′	&kp SQT
󰞕	&kp PGUP
󰞒	&kp PGDN
󰞓	&kp HOME
󰞔	&kp END
W←	&kp LG(B)
W→	&kp LG(F)
λ←	&kp LC(LG(B))
λ→	&kp LC(LG(F))
¶←	&kp LG(LBRC)
¶→	&kp LG(RBRC)
S←	&kp LG(A)
S→	&kp LG(E)
UND	&kp LC(SLASH)
BEG	&kp LG(M)
󰞷	&kp LG(M)
Bu0	&kp LC(LG(N0))
Bu1	&kp LC(LG(N1))
Bu2	&kp LC(LG(N2))
Bu3	&kp LC(LG(N3))
󱢍	&flip_buffer
󰅗	&kp LC(LG(N0))
󰍵	&kp LC(LG(N1))
󰇽	&kp LC(LG(N2))
󰿋	&kp LC(LG(N3))
󱃗	&kp LG(O)
OTH	&kp LG(O)
FLP	&kp LS(LG(O))
󰿦	&none
󰆢	&none
	&trans
M₀!	&tog 0
QUE	&tog 0
M₁	&mo 1
NUM	&mo 1
SFT	&smart_shft
M₂	&mo 2
SYM	&sym_layer6
M₃	&mo 3
MOV	&mo 3
M₄	&mo 4
GAM	&tog 4
FUN	&mo 9
M₅	&mo 5
LIN	&mo 5
SEL	&mo 5
NEW	&to 6
MV	&mo 7
	&tog 7
BOX	&tog 8
NM	&mo 8
FN	&mo 9
BTC	&bt BT_CLR
BT1	&bt BT_SEL 0
BT2	&bt BT_SEL 1
BT3	&bt BT_SEL 2
BT4	&bt BT_SEL 3
RST	&sys_reset
USB	&bootloader
󰘵a	&hmlslow LALT A
s	&hml LS(LC(LALT)) S
󰆾s	&hltl 3 S
󰘳d	&hml LCMD D
󰘴f	&hml LCTRL F
󰘴j	&hmr RCTRL J
󰘳k	&hmr RCMD K
l	&hmr LS(LC(LALT)) L
󰘵:;	&hmr RALT &colonsemi
󰘶󱁐	&hmr RSHIFT SPACE
°	&degree_symbol
′	&prime
″	&double_prime
–	&en_dash
—	&em_dash
‣	&triangular_bullet
‘	&left_single_quote
’	&right_single_quote
“	&left_double_quote
”	&right_double_quote
×	&multiplication_sign
÷	&division_sign
∀	&for_all
∃	&there_exists
∅	&empty_set
∈	&element_of
∉	&not_element_of
∎	&qed_motherfucker
∏	&product
∑	&sum
Ω	&ohm
µ	&micro
∘	&ring
∝	&proportional
∞	&infinity
∧	&logical_and
∨	&logical_or
∩	&intersection
∪	&union
≈	&almost_equal
≤	&less_than_or_equal
≥	&greater_than_or_equal
≡	&identical_to
≢	&not_identical_to
╭	&box_upperleft
╮	&box_upperright
╯	&box_lowerright
╰	&box_lowerleft
─	&box_horizontal
│	&box_vertical
┼	&box_middle
┴	&box_middlebottom
┬	&box_middletop
┤	&box_middleright
├	&box_middleleft
*	&kp STAR
	&kp LG(LS(N4))
#+end_src

** Status Viewer

#+name: status.py
#+begin_src python :tangle status.py :results value pp
import json, subprocess, serial, re, rich, rich.console, os, sys
from copy import copy
from pprint import pprint as pp
from more_itertools import chunked
updated = os.stat('layout.txt').st_mtime

POSITIONS = """
 ╭────────────────────────────────────────────────────────────────╮
 │                                                    │
 │     a    s    d    f                j    k    l    :       │
 │                                                    │
 │                                                            │
 │               󰆢    󰆢                󰆢    󰆢                 │
 ╰────────────────────────────────────────────────────────────────╯
"""


def load_layers():
    layers = list(chunked(open('layout.txt').read().split('\n'), 7))
    layers = ['\n'.join([s[:67] for s in l]) for l in layers]
    layers = [re.sub(r'([│╰╯─╭╮]+)', r'[bold turquoise2]\1[/]', layer) for layer in layers]
    layers = [re.sub(r'([󰆢])', r'[dim]\1[/]', layer) for layer in layers]
    return layers

layers = load_layers()

modifiers = {
    'shift': {
        ' ([abcdefghijklmnopqrstuvwxyz]) ': lambda m: f' {m.group(1).upper()} ',
    },
    'command': {
    },
    'control': {},
    'option': {},
}

# Cool colors:
#    [cyan]
#    [bold cyan]
#    [bold magenta1]
#    [bold green1]
#    [bold turquoise2]
#    [turquoise2]

def msb(n):
    "What is the most significant bit set (also, what is the highest layer set)"
    if not n:
        return 0
    i = 0
    while n:
        n = n >> 1
        i += 1
    return i - 1

p = subprocess.run(['/Users/guido/miniforge3/bin/discotool', 'json'], capture_output=True)
devs = json.loads(p.stdout)
#path = [d['ports'][0]['dev'] for d in devs if '23C7B91420F266DF' == d['serial_num']][0]
path = [d['ports'][0]['dev'] for d in devs if 'DF6114B5C3791031' == d['serial_num']][0]
ser = serial.Serial(path)
con = rich.console.Console(highlight=False)
if len(sys.argv) > 1 and sys.argv[1] == '-v':
    while s := ser.readline():
        print(s.decode().strip())
        
con.show_cursor(False)
layer = ''
shortcuts = {
#    'C-:    ': 'avy-goto-char',
#    'C-h m  ': 'describe-mode',
#    'C-h k  ': 'describe-key',
#    'C-h i  ': 'info',
#    'C-h l  ': 'view-lossage',
#    'C-x C-x': 'exchange-point-and-mark',
#    'C-c ←  ': 'winner-undo',
#    'M-o    ': 'other-window',
#    'C-c M-o': 'comint-clear-buffer',
}

# TODO: OSError when restarted this, we know this is going to happen when
#       we press the bootloader combo so maybe we should ancticipate this
#       and check until it's working.
#
#       It would also be cool if the script would watch for the download
#       Unzip it and copy it over.
try:
    while s := ser.readline():
        # zmk: set_layer_state: layer_changed: layer 3 state 0
        # GUIDO: layer 4, new state set: 16
        if m := re.search(r'GUIDO: layer (\d+), new state set: (\d+)', s.decode()):
            state = int(m.group(2))
            n = msb(state)
            layer = layers[n]
            con.clear()
            con.print(layer)
            con.print('\n'.join((f'{k}  {v}' for k, v in shortcuts.items())))
    
            if os.stat('layout.txt').st_mtime > updated:
                updated = os.stat('layout.txt').st_mtime
                layers = load_layers()
    
        if m := re.search(r'GUIDO: Modifiers set to 0x(\d\d)', s.decode()):
            mods = int(m.group(1), 16)
    
            modified = copy(layer)
            modline = []
            
            if mods & 0x01:
                modifiers['control']
                modline.append('Control')
            if mods &0x02:
                for a, b in modifiers['shift'].items():
                    modified = re.sub(a, b, modified)
                modline.append('Shift')
            if mods & 0x04:
                modifiers['option']
                modline.append('Option')
            if mods & 0x08:
                modifiers['command']
                modline.append('Command')
            if mods & 0x10:
                modifiers['control']
                modline.append('Control')
            if mods &0x20:
                modifiers['shift']
                modline.append('Shift')
            if mods & 0x40:
                modifiers['option']
                modline.append('Option')
            if mods & 0x80:
                modifiers['command']
                modline.append('Command')
            con.clear()
            con.print(modified)
            if modline:
                con.print(' '.join(modline), justify="center")
            else:
                con.print('---', justify="center")
        #else:
        #    con.print('---', justify="center")
except serial.serialutil.SerialException as e:
    print('Shutting down because keyboard was unplugged...')
    con.show_cursor(True)
except Exception as e:
    print('Shutting down...')
    print(type(e), e)

#+end_src

** Hand Position Cheat Sheet

#+name: zmk-keymap
#+begin_src html :noweb yes :tangle docs/layout.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <link href="stylesheet.css" rel="stylesheet">
  <style>
    body { background-color: black; color: white; }
    td { padding-top: -1px; padding-bottom: -1px; padding-left: 5px; padding-right: 5px; }
    .positions { display: none; }
    .show { display: block; }
    pre { font-family: MonaspiceAr Nerd Font Mono,monospace; }
  </style>

  <pre>
    <<layout>>
  </pre>
  
#+end_src

#+name: zmk-keymap
#+begin_src html :noweb yes :tangle docs/hand-positions.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <link href="stylesheet.css" rel="stylesheet">
  <style>
    body { background-color: black; color: white; }
    td { padding-top: -1px; padding-bottom: -1px; padding-left: 5px; padding-right: 5px; }
    .positions { display: none; }
    .show { display: block; }
  </style>

  <<hand-positions()>>
#+end_src

#+name: hand-positions
#+begin_src python :results output
from string import whitespace
import re
taps = '󰎤󰎧󰎪󰎭󰎱󰎳󰎶󰎹󰎼󰽽󰎡'

kb = """
Tqwert  yuiopB
Casdfg  hjkl:R
Szxcvb  nm,./H
    123456
""".strip()

right = "TqwertCasdfgSzxcvb"
left = "yuiopBhjkl:Rnm,./H"
home = 'asdfjkl:25'
leftmods = {
    'O': 'a',
    'H': 's',
    'M': 'd',
    'C': 'f',
    '1': '1',
    '2': '2',
    '3': '3',
}
rightmods = {
    'C': 'j',
    'M': 'k',
    'H': 'l',
    'O': ':',
    '4': '4',
    '5': '5',
    '6': '6',
}

# TODO: change to convert from emacs notation to my notation before everything
lossage_chars = [
    ('SPC',    '5'),
    ('<left>', '3-j'),
]

lossage = """
 C-x C-s        ;; save-buffer
 C-x b          ;; switch-to-buffer
 C-y            ;; yank
 C-d            ;; delete-char
 C-x k          ;; kill-buffer
 C-a            ;; beginning-of-line-or-indentation
 C-k            ;; kill-line
 C-/            ;; undo
 C-SPC          ;; set-mark-command
 M-w            ;; indicate-and-copy-region
"""

"""
 C-x C-s        ;; save-buffer
 M-o            ;; other-window
 C-x b          ;; switch-to-buffer
 C-l            ;; recenter-top-bottom
 C-y            ;; yank
 C-d            ;; delete-char
 C-x k          ;; kill-buffer
 C-a            ;; beginning-of-line-or-indentation
 C-k            ;; kill-line
 C-/            ;; undo
 C-SPC          ;; set-mark-command
 M-w            ;; indicate-and-copy-region
 C-e            ;; move-end-of-line
 M-^            ;; delete-indentation
 C-g            ;; abort-minibuffers
 C-x C-f        ;; find-file
 C-:            ;; avy-goto-char
 C-h m          ;; describe-mode
 C-h k          ;; describe-key
 C-h i          ;; info
 C-h l          ;; view-lossage
 C-x C-x        ;; exchange-point-and-mark
 C-c <left>     ;; winner-undo
 M-o            ;; other-window
 C-c M-o        ;; comint-clear-buffer
 C-h a          ;;
"""

def r(c, seq):
    if c in seq: return seq.pop(c)
    if c in whitespace: return c
    if c in home: return '󰆢'
    return ' '

def table(kb):
    print("""<table style="font-family: 'MonaspiceAr Nerd Font Mono'; font-weight: normal; font-style: normal; font-size: 40px;">""")
    for row in kb.splitlines():
        print('<tr>')
        for k in row:
            if k == '󰿦':
                k = f'<span style="color: magenta;">{k}</span>'
            elif k in taps:
                k = f'<span style="color: cyan;">{k}</span>'
            elif k == ' ':
                k = '<span style="color: black;">󰆢</span>'
            print(f'<td>{k}</td>')
        print('</tr>')
    print('</table>')

for seq in lossage.strip().splitlines():
    if m := re.search(r'(.+);; (\S+)', seq):
        seq, name = m.groups()
    held = None
    d = {}
    print('<table class="positions show"><tr><td>')
    print(name)
    for x, y in lossage_chars:
        seq = seq.replace(x, y)
    if m := re.search(r'(.);; (\S+)', seq):
        seq, name = m.groups()
    for s in seq.strip().split():
        if m := re.match(r'(.)-(\S+)', s):
            mod, key = m.groups()
            if held and mod != held:
                table(''.join([r(c, d) for c in kb]))
                print('</td><td>')
            held = mod
            if key in left:
                d[leftmods[mod]] = '󰿦'
            elif key in right:
                d[rightmods[mod]] = '󰿦'
            d[key] = taps[len(d)]
        else:
            if held:
                table(''.join([r(c, d) for c in kb]))
                print('</td><td>')
            held = mod
            if s in lossage_chars:
                s = lossage_chars[s]
            d[s] = taps[len(d)]
    table(''.join([r(c, d) for c in kb]))
    print('</td></tr></table>')
    print('<br><br><br><br><br><br>')

#+end_src


