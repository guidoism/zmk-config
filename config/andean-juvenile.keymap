// -*- mode: dts; tab-width: 2; -*-

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#define HOST_OS 2
#include "zmk-helpers/helper.h"
#include "unicode.h"

/*                                      48 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────┬─────────────────────╮   ╭─────────────────────┬─────────────────────╮
  │  0   1   2   3   4 │  5   6   7   8   9  │   │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
  │ 10  11  12  13  14 │ 15  16  17  18  19  │   │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  │ 20  21  22  23  24 │ 25  26  27  28  29  │   │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
  │         30  31  32 │ 33  34  35          │   │         LH2 LH1 LH0 │ RH0 RH1 RH2         │
  ╰────────────────────┴─────────────────────╯   ╰─────────────────────┴─────────────────────╯ */

// left-top row
#define LT0  4  
#define LT1  3
#define LT2  2
#define LT3  1
#define LT4  0

// right-top row
#define RT0  5  
#define RT1  6
#define RT2  7
#define RT3  8
#define RT4  9

// left-middle row
#define LM0 14  
#define LM1 13
#define LM2 12
#define LM3 11
#define LM4 10

// right-middle row
#define RM0 15  
#define RM1 16
#define RM2 17
#define RM3 18
#define RM4 19

// left-bottom row
#define LB0 24  
#define LB1 23
#define LB2 22
#define LB3 21
#define LB4 20

// right-bottom row
#define RB0 25  
#define RB1 26
#define RB2 27
#define RB3 28
#define RB4 29

// left thumb keys
#define LH0 32  
#define LH1 31
#define LH2 30

// right thumb keys
#define RH0 33  
#define RH1 34
#define RH2 35

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH0 LH1 LH2 RH0 RH1 RH2 

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: colon | shift + tap: semicolon
SIMPLE_MORPH(colonsemi, SFT, &kp COLON, &kp SEMI)

#define QUICK_TAP_MS 175

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

ZMK_HOLD_TAP(hmlslow, 
    flavor = "balanced"; 
    tapping-term-ms = <280>; 
    quick-tap-ms = <280>; 
    require-prior-idle-ms = <150>; 
    bindings = <&kp>, <&kp>; 
    hold-trigger-key-positions = <KEYS_R THUMBS>; 
    hold-trigger-on-release; 
)

MAKE_HRM(hltl, &mo, &kp, KEYS_R THUMBS)  // left-hand HR layer-taps
MAKE_HRM(hltr, &mo, &kp, KEYS_L THUMBS)  // right-hand HR layer-taps

//MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
//MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
//MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

// tap: nothing | hold: symbol layer | cmd + hold: new layer
ZMK_MOD_MORPH(sym_layer6,
    bindings = <&mo 2>, <&mo 6>;
    mods = <(MOD_LGUI|MOD_RGUI)>;
)

ZMK_BEHAVIOR(flip_buffer, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp LC(X) &kp B &kp RET>;
)

// index on r u in FN layer within 100 milliseconds
ZMK_COMBO(startbootloader,  &bootloader, 4 7, 9, 100)

//////////////////////////////////////////////////////////
// L E F T   H A N D

// TAB = S + F
ZMK_COMBO(tab_combo, &kp TAB, 14 16, ALL, 50)

// MOV = D + F
ZMK_COMBO(mov_combo, &mo 3, 15 16, ALL, 50)

// OPT = R + T
ZMK_COMBO(option_combo, &kp LALT, 4 5, ALL, 50)

//////////////////////////////////////////////////////////
// R I G H T   H A N D 

// RET = J + L
ZMK_COMBO(ret_combo, &kp RET, 19 21, ALL, 50)

// SFT = J + K
ZMK_COMBO(oneshot_shift_combo, &sk LSHIFT, 19 20, ALL, 50)

// CAPSWORD = J + K + L
ZMK_COMBO(capsword_combo, &caps_word, 19 20 21, ALL, 50)




ZMK_LAYER(BASE,
    &kp Q        &kp W        &kp E        &kp R        &kp T        &kp Y        &kp U        &kp I        &kp O        &kp P    
    &kp A        &kp S        &kp D     &hml LCTRL F    &kp G        &kp H     &hmr RCTRL J    &kp K        &kp L      &colonsemi 
    &kp Z        &kp X        &kp C        &kp V        &kp B        &kp N        &kp M      &kp COMMA     &kp DOT     &kp SLASH  
   &kp LCMD      &mo 1        &mo 3        &mo 5     &hmr RSHIFT SPACE &sym_layer6 )
ZMK_LAYER(NUM,
   &kp EXCL      &kp AT      &kp HASH     &kp DLLR   &kp PERCENT   &kp CARET      &kp N7       &kp N8       &kp N9    &degree_symbol
   &kp DQT      &kp AMPS     &kp STAR    &kp UNDER      &kp N0      &kp PLUS      &kp N4       &kp N5       &kp N6      &kp SQT   
 &multiplication_sign &division_sign  &kp EQUAL    &kp MINUS     &kp DOT       &none        &kp N1       &kp N2       &kp N3     &kp SLASH  
   &kp LCMD      &trans       &none        &none     &hmr RSHIFT SPACE    &none    )
ZMK_LAYER(SYM,
 &left_double_quote &right_double_quote &left_single_quote &right_single_quote &double_prime    &micro        &ohm        &none        &none        &none    
   &kp LBKT     &kp RBKT     &kp LPAR     &kp RPAR      &prime      &kp TAB     &kp MINUS    &kp EQUAL      &none        &none    
    &kp LT       &kp GT      &kp LBRC     &kp RBRC    &kp GRAVE      &none        &none        &none        &none     &kp BACKSLASH
    &mo 9        &none        &none        &none     &hmr RSHIFT SPACE    &trans   )
ZMK_LAYER(MOV,
    &none        &none     &kp LG(LBRC) &kp LG(RBRC)    &none       &kp ESC      &kp PGUP      &kp UP      &kp PGDN      &none    
    &none        &none      &kp LG(B)    &kp LG(F)      &none       &kp BSPC     &kp LEFT     &kp DOWN    &kp RIGHT    &kp LG(M)  
    &none        &none        &none        &none        &none        &none       &kp HOME      &none       &kp END       &none    
   &kp LCMD      &mo 1        &trans       &tog 4    &hmr RSHIFT SPACE    &none    )
ZMK_LAYER(GAM,
   &kp ESC      &kp Q       &kp W       &kp E       &kp R       &kp Y       &kp U       &kp UP      &kp O       &kp P   
   &kp TAB      &kp A       &kp S       &kp D       &kp F       &kp G      &kp LEFT    &kp DOWN   &kp RIGHT     &kp I   
    &kp L       &kp Z       &kp X       &kp C       &kp V       &kp B       &kp N       &kp M       &kp H       &kp J   
 &smart_shft  &kp SPACE     &none       &none       &none       &none   )
ZMK_LAYER(SEL,
 &none  &none  &none  &none  &none  &none  &none  &none  &none  &none 
 &none  &none  &none  &none  &none  &tog 8 &none  &none  &none  &none 
 &none  &none  &none  &none  &none  &none  &none  &none  &none  &none 
 &trans &none  &none  &none  &none  &trans)
ZMK_LAYER(layer_6,
 &none &none &none &none &none &none &none &none &none &none
 &none &kp F &kp R &kp E &kp E &none &none &none &none &none
 &none &none &none &none &none &none &none &none &none &none
 &none &none &none &none &none &none)
ZMK_LAYER(layer_7,
 &none &none &none &none &none &none &none &none &none &none
 &none &none &none &none &none &none &none &none &none &none
 &none &none &none &none &none &none &none &none &none &none
 &none &none &none &none &none &none)
ZMK_LAYER(BOX,
    &none        &none     &box_upperleft &box_upperright    &none        &none        &none        &none        &none        &none    
 &box_horizontal &box_vertical &box_lowerleft &box_lowerright    &none        &tog 8       &none        &none        &none        &none    
 &box_middle  &box_middlebottom &box_middletop &box_middleright &box_middleleft    &none        &none        &none        &none        &none    
   &kp LCMD      &none        &none        &none        &none        &none    )
ZMK_LAYER(FN,
   &kp ESC       &kp F1       &kp F2       &kp F3       &kp F4       &kp F5       &kp F6       &kp F7       &kp F8       &kp F9   
    &none     &flip_buffer &kp LC(LG(N0)) &kp LC(LG(N1))    &none        &none     &kp LC(LG(N2)) &kp LC(LG(N3))  &kp LG(O)      &none    
   &kp F10      &kp F11      &kp F12      &kp F13      &kp F14      &kp F15      &kp F16      &kp F17      &kp F18    &kp LG(LS(N4))
&trans       &none        &none        &none        &none        &trans   )
