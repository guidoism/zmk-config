
/* -*- mode: dts; tab-width: 2; -*-
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#define HOST_OS 2
#include "../zmk-nodefree-config/helper.h"


#define DEFAULT 0
#define NUMBERS 1
#define SYMBOLS 2

// F O R E I G N
ZMK_UNICODE_SINGLE(euro_sign,             N2, N0, A, C)   // €

// G E N E R A L   P U N C T U A T I O N
ZMK_UNICODE_SINGLE(degree_symbol,         N0, N0, B, N0)  // ° 
ZMK_UNICODE_SINGLE(prime,                 N2, N0, N3, N2) // ′
ZMK_UNICODE_SINGLE(double_prime,          N2, N0, N3, N3) // ″
ZMK_UNICODE_SINGLE(en_dash,               N2, N0, N1, N3) // –
ZMK_UNICODE_SINGLE(em_dash,               N2, N0, N1, N4) // —
ZMK_UNICODE_SINGLE(triangular_bullet,     N2, N0, N2, N3) // ‣
ZMK_UNICODE_SINGLE(left_single_quote,     N2, N0, N1, N8) // ‘
ZMK_UNICODE_SINGLE(right_single_quote,    N2, N0, N1, N9) // ’
ZMK_UNICODE_SINGLE(left_double_quote,     N2, N0, N1, C)  // “
ZMK_UNICODE_SINGLE(right_double_quote,    N2, N0, N1, D)  // ”

// M A T H
ZMK_UNICODE_SINGLE(multiplication_sign,   N0, N0, D, N7)  // × 
ZMK_UNICODE_SINGLE(division_sign,         N0, N0, F, N7)  // ÷ 
ZMK_UNICODE_SINGLE(for_all,               N2, N2, N0, N0) // ∀ 
ZMK_UNICODE_SINGLE(there_exists,          N2, N2, N0, N3) // ∃ 
ZMK_UNICODE_SINGLE(empty_set,             N2, N2, N0, N5) // ∅ 
ZMK_UNICODE_SINGLE(element_of,            N2, N2, N0, N8) // ∈ 
ZMK_UNICODE_SINGLE(not_element_of,        N2, N2, N0, N9) // ∉ 
ZMK_UNICODE_SINGLE(qed_motherfucker,      N2, N2, N0, E)  // ∎ 
ZMK_UNICODE_SINGLE(product,               N2, N2, N0, F)  // ∏ 
ZMK_UNICODE_SINGLE(sum,                   N2, N2, N1, N1) // ∑ 
ZMK_UNICODE_SINGLE(ring,                  N2, N2, N1, N8) // ∘ 
ZMK_UNICODE_SINGLE(proportional,          N2, N2, N1, D)  // ∝ 
ZMK_UNICODE_SINGLE(infinity,              N2, N2, N1, E)  // ∞ 
ZMK_UNICODE_SINGLE(logical_and,           N2, N2, N2, N7) // ∧ 
ZMK_UNICODE_SINGLE(logical_or,            N2, N2, N2, N8) // ∨ 
ZMK_UNICODE_SINGLE(intersection,          N2, N2, N2, N9) // ∩ 
ZMK_UNICODE_SINGLE(union,                 N2, N2, N2, A)  // ∪ 
ZMK_UNICODE_SINGLE(almost_equal,          N2, N2, N4, N8) // ≈ 
ZMK_UNICODE_SINGLE(less_than_or_equal,    N2, N2, N6, N4) // ≤ 
ZMK_UNICODE_SINGLE(greater_than_or_equal, N2, N2, N6, N5) // ≥ 
ZMK_UNICODE_SINGLE(identical_to,          N2, N2, N6, N1) // ≡ 
ZMK_UNICODE_SINGLE(not_identical_to,      N2, N2, N6, N2) // ≢ 

// B O X  D R A W I N G
ZMK_UNICODE_SINGLE(box_upperleft,         N2, N5, N6, D)  // ╭ 
ZMK_UNICODE_SINGLE(box_upperright,        N2, N5, N6, E)  // ╮ 
ZMK_UNICODE_SINGLE(box_lowerright,        N2, N5, N6, F)  // ╯ 
ZMK_UNICODE_SINGLE(box_lowerleft,         N2, N5, N7, N0) // ╰ 
ZMK_UNICODE_SINGLE(box_horizontal,        N2, N5, N0, N0) // ─ 
ZMK_UNICODE_SINGLE(box_vertical,          N2, N5, N0, N2) // │ 
ZMK_UNICODE_SINGLE(box_middle,            N2, N5, N3, C)  // ┼ 
ZMK_UNICODE_SINGLE(box_middlebottom,      N2, N5, N3, N4) // ┴ 
ZMK_UNICODE_SINGLE(box_middletop,         N2, N5, N2, C)  // ┬ 
ZMK_UNICODE_SINGLE(box_middleright,       N2, N5, N2, N4) // ┤ 
ZMK_UNICODE_SINGLE(box_middleleft,        N2, N5, N1, C)  // ├ 

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

/*
// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUMBERS 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUMBERS>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUMBERS>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};
*/




/ {
macros {
ZMK_MACRO(KIL, wait-ms = <30>; tap-ms = <40>; bindings =  <&macro_press &kp LCTRL>, <&macro_tap &kp X>, <&macro_release &kp LCTRL>, <&macro_tap &kp K>;)
ZMK_MACRO(SAV, wait-ms = <30>; tap-ms = <40>; bindings =  <&macro_press &kp LCTRL>, <&macro_tap &kp X &kp S>, <&macro_release &kp LCTRL>;)
ZMK_MACRO(BFS, wait-ms = <30>; tap-ms = <40>; bindings =  <&macro_press &kp LCTRL>, <&macro_tap &kp X &kp B>, <&macro_release &kp LCTRL>;)
};
};

/ {
    behaviors {
      colonsemi: colonsemi {
        compatible = "zmk,behavior-mod-morph";
        label = "COLONSEMI";
        #binding-cells = <0>;
        bindings = <&kp COLON>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      lh_pht: left_hand_positional_hold_tap {        // This is a certain type of homerow mod
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <6 7 8 9 10 11>;    // <---[[right-hand keys]]
      };
      hm: homerow_mods {                            // This is another way to do homerow mods
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <150>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
      bhm: balanced_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;    // <---[[moderate duration]]
        quick-tap-ms = <200>;
        //require-prior-idle-ms = <125>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
      };
   };
};

/ {
keymap {
compatible = "zmk,keymap"; 
0_layer {
 bindings = <
 &kp TAB   &kp Q    &kp W    &kp E    &kp R    &kp T        &kp Y    &kp U    &kp I    &kp O    &kp P    &kp BSPC  
&kp LCTRL  &bhm LCTRL A   &bhm LALT S   &bhm LCMD D   &bhm LSFT F    &kp G        &kp H   &bhm RSFT J   &bhm RCMD K   &bhm RALT L   &colonsemi    &kp RET 
&smart_shft   &kp Z    &kp X    &kp C    &kp V    &kp B        &kp N    &kp M    &kp COMMA    &kp DOT    &kp SLASH    &kp SEMI   
                    &mo 4   &mo 5        &kp N3   &kp LCTRL                      
          &kp RALT  &kp LCMD  &smart_num   &mo 3       &smart_shft   &kp SPACE   &mo 2   &mo 8              
>;
};

1_layer {
 bindings = <
  &kp TILDE    &kp EXCL    &kp AT    &kp HASH    &kp DLLR    &kp PERCENT        &kp CARET    &kp N7    &kp N8    &kp N9    &degree_symbol    &kp BSPC  
 &none    &kp DQT    &kp AMPS    &kp STAR    &kp UNDER    &kp N0        &kp PLUS    &kp N4    &kp N5    &kp N6    &kp SQT    &kp PIPE   
 &none    &none    &none    &kp EQUAL    &kp MINUS    &kp DOT        &none    &kp N1    &kp N2    &kp N3    &kp SLASH    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD   &trans    &none        &none    &kp SPACE    &none    &none              
>;
};

2_layer {
 bindings = <
  &kp GRAVE    &left_single_quote    &right_single_quote    &left_double_quote    &right_double_quote    &none        &none    &multiplication_sign    &division_sign    &none    &none    &kp BSPC  
 &prime    &kp LBKT    &kp RBKT    &kp LPAR    &kp RPAR    &none        &none    &kp MINUS    &kp EQUAL    &none    &none    &kp BACKSLASH   
 &double_prime    &kp LT    &kp GT    &kp LBRC    &kp RBRC    &none        &none    &none    &none    &none    &none    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD   &none    &none        &none    &none    &trans    &none              
>;
};

3_layer {
 bindings = <
 &kp ESC  &kp LC(LG(B))   &kp LC(LG(F))   &kp LG(LBRC)   &kp LG(RBRC)    &none        &none   &kp PGUP    &kp UP   &kp PGDN    &none   &kp LC(SLASH)  
 &none   &kp LG(A)   &kp LG(E)   &kp LG(B)   &kp LG(F)   &kp LG(M)       &none    &kp LEFT    &kp DOWN    &kp RIGHT    &none    &none   
 &none    &none    &none    &none    &none    &none        &none   &kp HOME   &none   &kp END   &none    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD  &smart_num    &trans        &none    &none    &none    &none              
>;
};

4_layer {
 bindings = <
  &none    &kp F1   &kp F2   &kp F3   &kp F4   &kp F5      &kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &KIL  
 &none    &kp LS(LC(LA(C)))   &kp LS(LC(LA(D)))   &kp LS(LC(LA(S)))   &kp LS(LC(LA(E)))   &kp LS(LC(LA(P)))      &kp LC(LG(N0))  &kp LC(LG(N1))  &kp LC(LG(N2))  &kp LC(LG(N3))   &none   &SAV  
 &none    &none    &none    &none    &none    &none        &none   &BFS  &kp LS(LG(O))  &kp LG(O)   &none    &none   
                     &trans    &none        &none    &none                       
          &kp RALT  &kp LCMD   &none   &tog 6       &none    &none    &none    &none              
>;
};

5_layer {
 bindings = <
  &none    &none    &none    &box_upperleft    &box_upperright    &none        &none    &none    &none    &none    &none    &none   
 &none    &box_horizontal    
 &none    &box_middle    &box_middlebottom    &box_middletop    &box_middleright    &box_middleleft        &none    &none    &none    &none    &none    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD   &none    &none        &none    &none    &none    &none              
>;
};

6_layer {
 bindings = <
 &tog 0   &none    &none    &none    &none    &none        &none    &none    &none    &none    &none   &sys_reset  
 &none   &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR       &none    &none    &none    &none    &none   &bootloader  
 &none    &none    &none    &none    &none    &none        &none    &none    &none    &none    &none    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD   &none   &tog 6       &none    &none    &none    &none              
>;
};

7_layer {
 bindings = <
 &kp TAB   &kp Q    &kp W    &kp F    &kp P    &kp G        &kp J    &kp L    &kp U    &kp Y    &colonsemi   &kp BSPC  
&kp LCTRL   &kp A    &kp R    &kp S    &kp T    &kp D        &kp H    &kp N    &kp E    &kp I    &kp O    &kp RET 
&smart_shft   &kp Z    &kp X    &kp C    &kp V    &kp B        &kp K    &kp M    &kp COMMA    &kp DOT    &kp SLASH    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD   &smart_num   &mo 3      &smart_shft   &kp SPACE   &mo 2   &mo 4              
>;
};

8_layer {
 bindings = <
  &none    &none    &kp Q    &kp W    &kp E    &kp R        &none    &none    &none    &none    &none    &none   
 &none    &none    &kp A    &kp S    &kp D    &kp F        &none    &none    &none    &none    &none    &none   
 &none    &none    &none    &none    &none    &none        &none    &none    &none    &none    &none    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD   &kp SPACE    &none        &none    &none    &none    &none              
>;
};
};
};
