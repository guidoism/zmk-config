/*                                      48 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  │                 36     │     37                 │ │                 LH5     │     RH5                 │
  │         38  39  40  41 │ 42  43  44  45         │ │         LH3 LH2 LH1 LH0 │ RH0 RH1 RH2 RH3         │
  ╰────────────────────────┴────────────────────────╯ ╰─────────────────────────┴─────────────────────────╯ */

#define LT0  5  // left-top row
#define LT1  4
#define LT2  3
#define LT3  2
#define LT4  1
#define LT5  0

#define RT0  6  // right-top row
#define RT1  7
#define RT2  8
#define RT3  9
#define RT4 10
#define RT5 11

#define LM0 17  // left-middle row
#define LM1 16
#define LM2 15
#define LM3 14
#define LM4 13
#define LM5 12

#define RM0 18  // right-middle row
#define RM1 19
#define RM2 20
#define RM3 21
#define RM4 22
#define RM5 23

#define LB0 29  // left-bottom row
#define LB1 28
#define LB2 27
#define LB3 26
#define LB4 25
#define LB5 24

#define RB0 30  // right-bottom row
#define RB1 31
#define RB2 32
#define RB3 33
#define RB4 34
#define RB5 35

#define LH0 43  // left thumb keys
#define LH1 42
#define LH2 41
#define LH3 40
#define LH4 37
#define LH5 36

#define RH0 44  // right thumb keys
#define RH1 45
#define RH2 46
#define RH3 47
#define RH4 38
#define RH5 39

// -*- mode: dts; tab-width: 2; -*-
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#define HOST_OS 2
#include "zmk-helpers/helper.h"

ZMK_UNICODE_SINGLE(euro_sign,                 N2, N0,  A,  C)   // €  EURO SIGN
ZMK_UNICODE_SINGLE(degree_symbol,             N0, N0,  B, N0)   // °  DEGREE SIGN
ZMK_UNICODE_SINGLE(prime,                     N2, N0, N3, N2)   // ′  PRIME
ZMK_UNICODE_SINGLE(double_prime,              N2, N0, N3, N3)   // ″  DOUBLE PRIME
ZMK_UNICODE_SINGLE(en_dash,                   N2, N0, N1, N3)   // –  EN DASH
ZMK_UNICODE_SINGLE(em_dash,                   N2, N0, N1, N4)   // —  EM DASH
ZMK_UNICODE_SINGLE(triangular_bullet,         N2, N0, N2, N3)   // ‣  TRIANGULAR BULLET
ZMK_UNICODE_SINGLE(left_single_quote,         N2, N0, N1, N8)   // ‘  LEFT SINGLE QUOTATION MARK
ZMK_UNICODE_SINGLE(right_single_quote,        N2, N0, N1, N9)   // ’  RIGHT SINGLE QUOTATION MARK
ZMK_UNICODE_SINGLE(left_double_quote,         N2, N0, N1,  C)   // “  LEFT DOUBLE QUOTATION MARK
ZMK_UNICODE_SINGLE(right_double_quote,        N2, N0, N1,  D)   // ”  RIGHT DOUBLE QUOTATION MARK
ZMK_UNICODE_SINGLE(multiplication_sign,       N0, N0,  D, N7)   // ×  MULTIPLICATION SIGN
ZMK_UNICODE_SINGLE(division_sign,             N0, N0,  F, N7)   // ÷  DIVISION SIGN
ZMK_UNICODE_SINGLE(for_all,                   N2, N2, N0, N0)   // ∀  FOR ALL
ZMK_UNICODE_SINGLE(there_exists,              N2, N2, N0, N3)   // ∃  THERE EXISTS
ZMK_UNICODE_SINGLE(empty_set,                 N2, N2, N0, N5)   // ∅  EMPTY SET
ZMK_UNICODE_SINGLE(element_of,                N2, N2, N0, N8)   // ∈  ELEMENT OF
ZMK_UNICODE_SINGLE(qed_motherfucker,          N2, N2, N0,  E)   // ∎  END OF PROOF
ZMK_UNICODE_SINGLE(product,                   N2, N2, N0,  F)   // ∏  N-ARY PRODUCT
ZMK_UNICODE_SINGLE(sum,                       N2, N2, N1, N1)   // ∑  N-ARY SUMMATION
ZMK_UNICODE_SINGLE(ring,                      N2, N2, N1, N8)   // ∘  RING OPERATOR
ZMK_UNICODE_SINGLE(proportional,              N2, N2, N1,  D)   // ∝  PROPORTIONAL TO
ZMK_UNICODE_SINGLE(infinity,                  N2, N2, N1,  E)   // ∞  INFINITY
ZMK_UNICODE_SINGLE(logical_and,               N2, N2, N2, N7)   // ∧  LOGICAL AND
ZMK_UNICODE_SINGLE(logical_or,                N2, N2, N2, N8)   // ∨  LOGICAL OR
ZMK_UNICODE_SINGLE(intersection,              N2, N2, N2, N9)   // ∩  INTERSECTION
ZMK_UNICODE_SINGLE(union,                     N2, N2, N2,  A)   // ∪  UNION
ZMK_UNICODE_SINGLE(almost_equal,              N2, N2, N4, N8)   // ≈  ALMOST EQUAL TO
ZMK_UNICODE_SINGLE(less_than_or_equal,        N2, N2, N6, N4)   // ≤  LESS-THAN OR EQUAL TO
ZMK_UNICODE_SINGLE(greater_than_or_equal,     N2, N2, N6, N5)   // ≥  GREATER-THAN OR EQUAL TO
ZMK_UNICODE_SINGLE(identical_to,              N2, N2, N6, N1)   // ≡  IDENTICAL TO
ZMK_UNICODE_SINGLE(box_upperleft,             N2, N5, N6,  D)   // ╭  BOX DRAWINGS LIGHT ARC DOWN AND RIGHT
ZMK_UNICODE_SINGLE(box_upperright,            N2, N5, N6,  E)   // ╮  BOX DRAWINGS LIGHT ARC DOWN AND LEFT
ZMK_UNICODE_SINGLE(box_lowerright,            N2, N5, N6,  F)   // ╯  BOX DRAWINGS LIGHT ARC UP AND LEFT
ZMK_UNICODE_SINGLE(box_lowerleft,             N2, N5, N7, N0)   // ╰  BOX DRAWINGS LIGHT ARC UP AND RIGHT
ZMK_UNICODE_SINGLE(box_horizontal,            N2, N5, N0, N0)   // ─  BOX DRAWINGS LIGHT HORIZONTAL
ZMK_UNICODE_SINGLE(box_vertical,              N2, N5, N0, N2)   // │  BOX DRAWINGS LIGHT VERTICAL
ZMK_UNICODE_SINGLE(box_middle,                N2, N5, N3,  C)   // ┼  BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
ZMK_UNICODE_SINGLE(box_middlebottom,          N2, N5, N3, N4)   // ┴  BOX DRAWINGS LIGHT UP AND HORIZONTAL
ZMK_UNICODE_SINGLE(box_middletop,             N2, N5, N2,  C)   // ┬  BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
ZMK_UNICODE_SINGLE(box_middleright,           N2, N5, N2, N4)   // ┤  BOX DRAWINGS LIGHT VERTICAL AND LEFT
ZMK_UNICODE_SINGLE(box_middleleft,            N2, N5, N1,  C)   // ├  BOX DRAWINGS LIGHT VERTICAL AND RIGHT
ZMK_UNICODE_SINGLE(ohm,                       N0, N3,  A, N9)   // Ω  GREEK CAPITAL LETTER OMEGA
ZMK_UNICODE_SINGLE(micro,                     N0, N0,  B, N5)   // µ  MICRO SIGN


#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH0 LH1 LH2 LH3 LH4 LH5 RH0 RH1 RH2 RH3 RH4 RH5

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

ZMK_COMBO(combo_caps_word, &caps_word, 17 20, ALL, 25)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: colon | shift + tap: semicolon
SIMPLE_MORPH(colonsemi, SFT, &kp COLON, &kp SEMI)

#define QUICK_TAP_MS 175

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

ZMK_HOLD_TAP(hmlslow, \
    'flavor = "balanced"; \',
    'tapping-term-ms = <280>; \',
    'quick-tap-ms = <280>; \',
    'require-prior-idle-ms = <150>; \',
    'bindings = <HOLD>, <TAP>; \',
    'hold-trigger-key-positions = <TRIGGER_POS>; \',
    'hold-trigger-on-release; \',
')',

MAKE_HRM(hltl, &mo, &kp, KEYS_R THUMBS)  // left-hand HR layer-taps
MAKE_HRM(hltr, &mo, &kp, KEYS_L THUMBS)  // right-hand HR layer-taps

//MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
//MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
//MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

ZMK_BEHAVIOR(flip_buffer, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp LC(X) &kp B &kp RET>;
)

// index on r u in FN layer within 100 milliseconds
ZMK_COMBO(startbootloader,  &bootloader, 4 7, 9, 100)

// GUIDO: This doesn't work because of the home-row-mods
// ZMK_COMBO(movelayer, &mo 7, 16 17, ALL, 50)

// TAB = C + V
ZMK_COMBO(tab_combo, &kp TAB, 27 28, ALL, 50)

// RET = M + ,
ZMK_COMBO(ret_combo, &kp RET, 31 32, ALL, 50)

// One-shot Shift = NUM + 󱁐
ZMK_COMBO(oneshot_space_combo, &sk LSHIFT, 42 45, ALL, 50)

ZMK_LAYER(layer_0, &kp TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp BSPC &kp LCTRL &hmlslow LALT A &hltl 3 S &hml LCMD D &hml LCTRL F &kp G &kp H &hmr RCTRL J &hmr RCMD K &hmr LS(LC(LALT)) L &colonsemi &kp RET &smart_shft &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &kp COMMA &kp DOT &kp SLASH &none &none &none &none &none &none &kp LCMD &mo 1 &mo 3 &mo 5 &hmr RSHIFT SPACE &mo 2 &none)
ZMK_LAYER(layer_1, &kp TILDE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PERCENT &kp CARET &kp N7 &kp N8 &kp N9 &degree_symbol &kp BSPC &none &kp DQT &kp AMPS &kp STAR &kp UNDER &kp N0 &kp PLUS &kp N4 &kp N5 &kp N6 &kp SQT &kp PIPE &none &multiplication_sign &division_sign &kp EQUAL &kp MINUS &kp DOT &none &kp N1 &kp N2 &kp N3 &kp SLASH &none &none &none &none &none &kp RALT &kp LCMD &trans &none &none &hmr RSHIFT SPACE &none &none)
ZMK_LAYER(layer_2, &none &left_double_quote &right_double_quote &left_single_quote &right_single_quote &double_prime &micro &ohm &none &none &none &kp BSPC &none &kp LBKT &kp RBKT &kp LPAR &kp RPAR &prime &kp TAB &kp MINUS &kp EQUAL &kp BSPC &kp RET &kp BACKSLASH &none &kp LT &kp GT &kp LBRC &kp RBRC &kp GRAVE &none &none &none &none &none &none &none &none &none &none &kp RALT &mo 9 &none &none &none &hmr RSHIFT SPACE &trans &none)
ZMK_LAYER(layer_3, &kp ESC &none &none &kp LG(LBRC) &kp LG(RBRC) &none &none &kp PGUP &kp UP &kp PGDN &none &none &none &none &none &kp LG(B) &kp LG(F) &none &none &kp LEFT &kp DOWN &kp RIGHT &kp LG(M) &none &none &none &none &none &none &none &none &kp HOME &none &kp END &none &none &none &none &none &none &kp RALT &kp LCMD &mo 1 &trans &tog 4 &hmr RSHIFT SPACE &none &none)
ZMK_LAYER(layer_4, &none &kp ESC &kp Q &kp W &kp E &kp R &kp Y &kp U &kp UP &kp O &kp P &tog 4 &none &kp TAB &kp A &kp S &kp D &kp F &kp G &kp LEFT &kp DOWN &kp RIGHT &kp I &kp RET &none &kp L &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &kp H &kp J &kp K &none &none &none &none &kp RALT &smart_shft &kp SPACE &none &none &none &none &none)
ZMK_LAYER(layer_5, &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &tog 8 &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &trans &none &none &none &none &trans &none)
ZMK_LAYER(layer_6, &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none)
ZMK_LAYER(layer_7, &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none)
ZMK_LAYER(layer_8, &none &none &none &box_upperleft &box_upperright &none &none &none &none &none &none &none &none &box_horizontal &box_vertical &box_lowerleft &box_lowerright &none &tog 8 &none &none &none &none &none &none &box_middle &box_middlebottom &box_middletop &box_middleright &box_middleleft &none &none &none &none &none &none &none &none &none &none &kp RALT &kp LCMD &none &none &none &none &none &none)
ZMK_LAYER(layer_9, &none &kp ESC &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &none &none &none &flip_buffer &kp LC(LG(N0)) &kp LC(LG(N1)) &none &none &kp LC(LG(N2)) &kp LC(LG(N3)) &kp LG(O) &none &none &none &kp F10 &kp F11 &kp F12 &kp F13 &kp F14 &kp F15 &kp F16 &kp F17 &kp F18 &kp LG(LS(N4)) &none &none &none &none &none &none &trans &none &none &none &none &trans &none)
