// -*- mode: dts; tab-width: 2; -*-
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#define HOST_OS 2
#include "zmk-helpers/helper.h"

//#define DEFAULT 0 //#define NUMBERS 1 //#define SYMBOLS 2

None

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

ZMK_COMBO(combo_caps_word, &caps_word, 17 20, ALL, 25)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: colon | shift + tap: semicolon
SIMPLE_MORPH(colonsemi, SFT, &kp COLON, &kp SEMI)

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29   // left hand
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 // right hand
#define THUMBS 36 37 38 39 40 41 42 43 44 45 46 47               // thumbs
#define QUICK_TAP_MS 175

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

//MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
//MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
//MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

/ {
keymap {
compatible = "zmk,keymap"; 
0_layer {
 bindings = <
 &kp TAB   &kp Q    &kp W    &kp E    &kp R    &kp T        &kp Y    &kp U    &kp I    &kp O    &kp P    &kp BSPC  
&kp LCTRL  &hml LALT A   &hml LS(LC(LALT)) S   &hml LCMD D   &hml LCTRL F    &kp G        &kp H   &hmr RCTRL J   &hmr RCMD K   &hmr LS(LC(LALT)) L   &hmr RALT COLON   &kp RET 
&smart_shft   &kp Z    &kp X    &kp C    &kp V    &kp B        &kp N    &kp M    &kp COMMA    &kp DOT    &kp SLASH    &kp SEMI   
                    &mo 4   &none       &to 6   &none                       
          &kp RALT  &kp LCMD  &mo 1  &mo 3       &none    &kp SPACE   &mo 2   &none              
>;
};

1_layer {
 bindings = <
  &kp TILDE    &kp EXCL    &kp AT    &kp HASH    &kp DLLR    &kp PERCENT        &kp CARET    &kp N7    &kp N8    &kp N9    &degree_symbol    &kp BSPC  
 &none    &kp DQT    &kp AMPS    &kp STAR    &kp UNDER    &kp N0        &kp PLUS    &kp N4    &kp N5    &kp N6    &kp SQT    &kp PIPE   
 &none    &none    &none    &kp EQUAL    &kp MINUS    &kp DOT        &none    &kp N1    &kp N2    &kp N3    &kp SLASH    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD   &trans    &none        &none    &kp SPACE    &none    &none              
>;
};

2_layer {
 bindings = <
  &kp GRAVE    &left_single_quote    &right_single_quote    &left_double_quote    &right_double_quote    &none        &none    &multiplication_sign    &division_sign    &none    &none    &kp BSPC  
 &prime    &kp LBKT    &kp RBKT    &kp LPAR    &kp RPAR    &none        &none    &kp MINUS    &kp EQUAL    &none    &none    &kp BACKSLASH   
 &double_prime    &kp LT    &kp GT    &kp LBRC    &kp RBRC    &none        &none    &none    &none    &none    &none    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD   &none    &none        &none    &none    &trans    &none              
>;
};

3_layer {
 bindings = <
 &kp ESC  &kp LC(LG(B))   &kp LC(LG(F))   &kp LG(LBRC)   &kp LG(RBRC)    &none        &none   &kp PGUP    &kp UP   &kp PGDN    &none    &none   
 &none   &kp LG(A)   &kp LG(E)   &kp LG(B)   &kp LG(F)   &kp LG(M)       &none    &kp LEFT    &kp DOWN    &kp RIGHT    &none    &none   
 &none    &none    &none    &none    &none    &none        &none   &kp HOME   &none   &kp END   &none    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD  &mo 1   &trans        &none    &none    &none    &none              
>;
};

4_layer {
 bindings = <
 &kp F11   &kp F1   &kp F2   &kp F3   &kp F4   &kp F5      &kp F6   &kp F7   &kp F8   &kp F9   &kp F10   &none   
&kp F12   &kp LS(LC(LA(C)))   &kp LS(LC(LA(D)))   &kp LS(LC(LA(S)))   &kp LS(LC(LA(E)))   &kp LS(LC(LA(P)))      &kp LC(LG(N0))  &kp LC(LG(N1))  &kp LC(LG(N2))  &kp LC(LG(N3))   &none    &none   
 &none    &none    &none    &none    &none    &none        &none    &none    &none    &none    &none    &none   
                     &trans    &none        &none    &none                       
          &kp RALT  &kp LCMD   &none    &none        &none    &none    &none    &none              
>;
};

5_layer {
 bindings = <
  &none    &none    &none    &box_upperleft    &box_upperright    &none        &none    &none    &none    &none    &none    &none   
 &none    &box_horizontal    
 &none    &box_middle    &box_middlebottom    &box_middletop    &box_middleright    &box_middleleft        &none    &none    &none    &none    &none    &none   
                     &none    &none        &none    &none                       
          &kp RALT  &kp LCMD   &none    &none        &none    &none    &none    &none              
>;
};

6_layer {
 bindings = <
  &none    &kp Q    &kp W    &kp E    &kp R    &kp T        &kp Y    &kp U    &kp I    &kp O    &kp P     &none  
 &none   &hml LALT A   &hml LS(LC(LALT)) S   &hml LCMD D   &hml LCTRL F    &kp G        &kp H   &hmr RCTRL J   &hmr RCMD K   &hmr LS(LC(LALT)) L   &hmr RALT COLON    &none  
 &none    &kp Z    &kp X    &kp C    &kp V    &kp B        &kp N    &kp M    &kp COMMA    &kp DOT   &kp SLASH    &none  
                     &none    &none        &none    &none                       
           &none   &mo 8    &kp LSHIFT   &kp BSPC       &kp RET   &kp SPACE  &mo 7    &none              
>;
};

7_layer {
 bindings = <
  &none    &left_double_quote    &right_double_quote    &left_single_quote    &right_single_quote    &kp DQT       &none    &kp PGUP    &kp UP    &kp PGDN    &none    &none   
 &none    &kp LBKT    &kp RBKT    &kp LPAR    &kp RPAR    &kp SQT       &none    &kp LEFT    &kp DOWN    &kp RIGHT    &kp LG(M)    &none   
 &none    &kp LT    &kp GT    &kp LBRC    &kp RBRC    &kp GRAVE        &none    &kp HOME    &none    &kp END    &none    &none   
                     &none    &none        &none    &none                       
           &none    &none    &kp LSHIFT   &kp BSPC       &kp RET   &kp SPACE    &trans    &none              
>;
};

8_layer {
 bindings = <
  &none    &kp TILDE    &kp AT    &kp HASH    &kp DLLR    &kp PERCENT        &kp CARET    &kp AMPS    &kp PIPE    &degree_symbol    &kp BACKSLASH    &none   
 &none    &kp N0    &kp N1    &kp N2    &kp N3    &kp N4        &kp N5    &kp N6    &kp N7    &kp N8    &kp N9    &none   
 &none    &kp     &kp     &kp STAR    &kp PLUS    &kp EQUAL        &kp UNDER    &kp MINUS    &kp COMMA    &kp DOT    &kp SLASH    &none   
                     &none    &none        &none    &none                       
           &none    &trans    &kp LSHIFT   &kp BSPC       &kp RET   &kp SPACE   &mo 9    &none              
>;
};

9_layer {
 bindings = <
  &none   &kp ESC  &kp F1   &kp F2   &kp F3   &kp F4       &kp F5   &kp F6   &kp F7   &kp F8   &kp F9    &none   
 &none   &kp F10  &kp F11  &kp F12  &kp F13  &kp F14      &kp F15  &kp F16  &kp F17  &kp F18  &kp F19   &none   
 &none    &none    &none    &none    &none    &none        &none    &none    &none    &none    &none    &none   
                     &none    &none        &none    &none                       
           &none    &none    &kp LSHIFT   &kp BSPC       &kp RET   &kp SPACE    &none    &none              
>;
};
};
};
