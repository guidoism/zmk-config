For some reason I have two keymap files: 
 - config/andean-condor.keymap
 - config/boards/shields/andean-condor/andean-condor.keymap

#+name: generate_zmk_config
#+begin_src python :var layout=parse_layout() :results none
f = open('/Users/guido/Repositories/Experiments/2023-01-18.andean-condor/zmk-config-condor-nicenano/config/boards/shields/andean-condor/andean-condor.keymap', 'w')
f.write(layout)
f = open('/Users/guido/Repositories/Experiments/2023-01-18.andean-condor/zmk-config-condor-nicenano/config/andean-condor.keymap', 'w')
f.write(layout)
#+end_src

* Run this
#+begin_src sh
alias keymap='/Users/guido/homebrew/bin/keymap'
alias cairosvg='/Users/guido/homebrew/bin/cairosvg'
keymap -c pretty/keymap_drawer.config.yaml parse -c 12 -z config/andean-condor.keymap > pretty/draw.yaml
python pretty/seperate_layers.py
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.0.yaml > pretty/layer.0.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.1.yaml > pretty/layer.1.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.2.yaml > pretty/layer.2.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.3.yaml > pretty/layer.3.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.4.yaml > pretty/layer.4.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.5.yaml > pretty/layer.5.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.6.yaml > pretty/layer.6.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.7.yaml > pretty/layer.7.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.8.yaml > pretty/layer.8.svg
cairosvg pretty/layer.0.svg -b white -o pretty/layer.0.png
cairosvg pretty/layer.1.svg -b white -o pretty/layer.1.png
cairosvg pretty/layer.2.svg -b white -o pretty/layer.2.png
cairosvg pretty/layer.3.svg -b white -o pretty/layer.3.png
cairosvg pretty/layer.4.svg -b white -o pretty/layer.4.png
cairosvg pretty/layer.5.svg -b white -o pretty/layer.5.png
cairosvg pretty/layer.6.svg -b white -o pretty/layer.6.png
cairosvg pretty/layer.7.svg -b white -o pretty/layer.7.png
cairosvg pretty/layer.8.svg -b white -o pretty/layer.8.png
#+end_src

#+RESULTS:



* Layout

#+name: layout
#+begin_src keymap :tangle layout.txt
 ╭────────────────────────────────────────────────────────────────╮
 │TAB   q    w    e    r    t        y    u    i    o    p    BS  │
 │CTL   a    s    d    f    g        h    j    k    l    :;   RET │
0│SFT   z    x    c    v    b        n    m    ,    .    /    ;   │
 │                    M₄   M₅        3   CTL                      │
 │          OPT  CMD  M₁   M₃       SFT   ␣   M₂    ∫N4           │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ ~    !    @    #    $    %        ^    7    8    9    ◌    BS  │
 │ ◌    "    &    *    _    0        +    4    5    6    '    |   │
1│ ◌    ◌    ◌    =    -    .        ◌    1    2    3    /    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   ◉    ◌        ◌    ␣    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ `    ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    BS  │
 │ ◌    [    ]    (    )    ◌        ◌    -    =    ◌    ◌    \   │
2│ ◌    <    >    {    }    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   ◌    ◌        ◌    ◌    ◉    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ESC  λ←   λ→   ¶←   ¶→    ◌        ◌   P↑    ↑   P↓    ◌   UND  │
 │ ◌   S←   S→   W←   W→   BEG       ◌    ←    ↓    →    ◌    ◌   │
3│ ◌    ◌    ◌    ◌    ◌    ◌        ◌   HME   ◌   END   ◌    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD  M₁    ◉        ◌    ◌    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ ◌    F1   F2   F3   F4   F5      F6   F7   F8   F9   F10  KIL  │
 │ ◌    ∫C   ∫D   ∫S   ∫E   ∫P      Bu0  Bu1  Bu2  Bu3   ◌   SAV  │
4│ ◌    ◌    ◌    ◌    ◌    ◌        ◌   BFS  FLP  OTH   ◌    ◌   │
 │                     ◉    ◌        ◌    ◌                       │
 │          OPT  CMD   ◌   M₆!       ◌    ◌    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ ◌    ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │ ◌    ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
5│ ◌    ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   ◌    ◌        ◌    ◌    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │M₀!   ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │ ◌   BT4  BT3  BT2  BT1  BTC       ◌    ◌    ◌    ◌    ◌    ◌   │
6│ ◌    ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   ◌   M₆!       ◌    ◌    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │TAB   q    w    f    p    g        j    l    u    y    :;   BS  │
 │CTL   a    r    s    t    d        h    n    e    i    o    RET │
7│SFT   z    x    c    v    b        k    m    ,    .    /    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   M₁   M₃      SFT   ␣   M₂   M₄             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ ◌    ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │ ◌    ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
8│ ◌    ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   ◌    ◌        ◌    ◌    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
#+end_src

* Generate Keymap File
#+name: parse_layout
#+begin_src python :var layout=layout :results output 

import re
from more_itertools import chunked
# Remove boxes
lines = [s for s in re.findall(r'\n.│([^│]+)│', layout)]
layers = list(chunked(lines, 5))
layers = ['\n'.join(l) for l in layers]

identity = {'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10',
            'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20',
            'F21', 'F22', 'F23', 'F24', 'ESC', 'TAB', 'RET', }
leftover = []
kp = {
    'CTL': 'LCTRL', 'SFT': 'LSHFT', 'OPT': 'RALT', 'CMD': 'LCMD', ',': 'COMMA', '.': 'DOT',
    '␣': 'SPACE', 'BS': 'BSPC', '/': 'SLASH', '~': 'TILDE', '^': 'CARET', "'": 'SQT',
    '%': 'PERCENT', '|': 'PIPE', '_': 'UNDER', '+': 'PLUS', '"': 'DQT', '$': 'DLLR',
    '&': 'AMPS', '*': 'STAR', '@': 'AT', '!': 'EXCL', '#': 'HASH', ')': 'RPAR',
    '\\': 'BACKSLASH', '=': 'EQUAL', '}': 'RBRC', '`': 'GRAVE', '[': 'LBKT', '>': 'GT',
    '(': 'LPAR', '-': 'MINUS', ']': 'RBKT', '<': 'LT', '{': 'LBRC', ';': 'SEMI',
    '→':   'RIGHT',    '←':   'LEFT',     '↓':  'DOWN',      '↑':  'UP',
    'HME': 'HOME',     'END': 'END',      'P↑': 'PGUP',      'P↓': 'PGDN',
    'W←':  'LG(B)',    'W→':  'LG(F)',    'λ←': 'LC(LG(B))', 'λ→': 'LC(LG(F))',
    '¶←':  'LG(LBRC)', '¶→':  'LG(RBRC)', 'S←': 'LG(A)',     'S→': 'LG(E)',
    'UND': 'LC(SLASH)',
    'BEG': 'LG(M)',
    'Bu0': 'LC(LG(N0))',
    'Bu1': 'LC(LG(N1))',
    'Bu2': 'LC(LG(N2))',
    'Bu3': 'LC(LG(N3))',
    'OTH': 'LG(O)', # Other buffer (cycle buffers)
    'FLP': 'LS(LG(O))', # Flip buffer
}
changed = {
    '◌': '&none',
    '◉': '&trans',
    'M₁': '&mo 1',
    'M₂': '&mo 2',
    'M₃': '&mo 3',
    'M₄': '&mo 4',
    'M₅': '&mo 5',
    'M₆!': '&tog 6',
    'M₀!': '&tog 0',
    'BTC': '&bt BT_CLR',
    'BT1': '&bt BT_SEL 0',
    'BT2': '&bt BT_SEL 1',
    'BT3': '&bt BT_SEL 2',
    'BT4': '&bt BT_SEL 3',
    ':;': '&colonsemi',
}

macros = {
    'KIL': ' <&macro_press &kp LCTRL>, <&macro_tap &kp X>, <&macro_release &kp LCTRL>, <&macro_tap &kp K>',
    'SAV': ' <&macro_press &kp LCTRL>, <&macro_tap &kp X &kp S>, <&macro_release &kp LCTRL>',
    'BFS': ' <&macro_press &kp LCTRL>, <&macro_tap &kp X &kp B>, <&macro_release &kp LCTRL>',
}

def f(m):
    k = m.group(1)
    if k in macros: return f'&{k}'
    if k in identity: return f'&kp {k}'
    if k in kp: return f'&kp {kp[k]}'
    if k in changed: return f'{changed[k]}'
    if k in 'abcdefghijklmnopqkrstuvwxyz': return f'&kp {k.upper()}'
    if k in '0123456789': return f'&kp N{k}'
    if k in identity: return f'&kp {k}'
    if k[0] == '∫': return f'&kp LS(LC(LA({k[1:]})))' # Meh key
    leftover.append(k)
    return f'&none'

sub = lambda s: re.sub(r'(\S+)', f, s)


print("""
/* -*- mode: dts; tab-width: 2; -*-
 ,* Copyright (c) 2021 The ZMK Contributors
 ,*
 ,* SPDX-License-Identifier: MIT
 ,*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUMBERS 1
#define SYMBOLS 2

""")

parts = [
    '/ {\nmacros {',
    '\n'.join(f'ZMK_MACRO({k}, wait-ms = <30>; tap-ms = <40>; bindings = {v};)' for k, v in macros.items()),
    '};\n};',
]
print('\n'.join(parts))

print("""
/ {
    behaviors {
      colonsemi: colonsemi {
        compatible = "zmk,behavior-mod-morph";
        label = "COLONSEMI";
        #binding-cells = <0>;
        bindings = <&kp COLON>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
   };
};
""")

parts = [
    '/ {\nkeymap {\ncompatible = "zmk,keymap"; ',
    '\n\n'.join(f'{i}_layer {{\n bindings = <\n {sub(s)} \n>;\n}};' for i, s in enumerate(layers)),
    '};\n};',
]
print('\n'.join(parts))


#print()
if leftover:
    print(list(leftover))

#+end_src

* Layer Status Viewer

This is what discotool json returns for each device:

{'manufacturer': 'ZMK Project',
  'name': 'Andean Condor',
  'ports': [{'dev': '/dev/cu.usbmodem2301', 'iface': ''}],
  'product_id': 24926,
  'serial_num': '23C7B91420F266DF',
  'usb_location': '0x02300000',
  'vendor_id': 7504,
  'version': '',
  'volumes': []}]


#+name: status.py
#+begin_src python :tangle status.py :results value pp
import json, subprocess, serial, re, rich, rich.console, os
from copy import copy
updated = os.stat('layout.txt').st_mtime
from pprint import pprint as pp
from more_itertools import chunked
layers = list(chunked(open('layout.txt').read().split('\n'), 7))
layers = ['\n'.join(l) for l in layers]
layers = [re.sub(r'([│╰╯─╭╮]+)', r'[bold turquoise2]\1[/]', layer) for layer in layers]
layers = [re.sub(r'([◉◌])', r'[dim]\1[/]', layer) for layer in layers]

modifiers = {
    'shift': {
        ' ([abcdefghijklmnopqrstuvwxyz]) ': lambda m: f' {m.group(1).upper()} ',
    },
    'command': {
    },
    'control': {},
    'option': {},
}

# Cool colors:
#    [cyan]
#    [bold cyan]
#    [bold magenta1]
#    [bold green1]
#    [bold turquoise2]
#    [turquoise2]

def msb(n):
    "What is the most significant bit set (also, what is the highest layer set)"
    if not n:
        return 0
    i = 0
    while n:
        n = n >> 1
        i += 1
    return i - 1

p = subprocess.run(['/Users/guido/miniforge3/bin/discotool', 'json'], capture_output=True)
devs = json.loads(p.stdout)
path = [d['ports'][0]['dev'] for d in devs if '23C7B91420F266DF' == d['serial_num']][0]
ser = serial.Serial(path)
con = rich.console.Console(highlight=False)
layer = ''

while s := ser.readline():
    # zmk: set_layer_state: layer_changed: layer 3 state 0
    # GUIDO: layer 4, new state set: 16
    if m := re.search(r'GUIDO: layer (\d+), new state set: (\d+)', s.decode()):
        state = int(m.group(2))
        n = msb(state)
        layer = layers[n]
        con.clear()
        con.print(layer)

        if os.stat('layout.txt').st_mtime > updated:
            updated = os.stat('layout.txt').st_mtime
            layers = json.load(open('layout.txt'))

    if m := re.search(r'GUIDO: Modifiers set to 0x(\d\d)', s.decode()):
        mods = int(m.group(1), 16)

        modified = copy(layer)
        modline = []
        
        if mods & 0x01:
            modifiers['control']
            modline.append('^')
        if mods &0x02:
            for a, b in modifiers['shift'].items():
                modified = re.sub(a, b, modified)
            modline.append('⇧')
        if mods & 0x04:
            modifiers['option']
            modline.append('⌥')
        if mods & 0x08:
            modifiers['command']
            modline.append('⌘')
        if mods & 0x10:
            modifiers['control']
            modline.append('^')
        if mods &0x20:
            modifiers['shift']
            modline.append('⇧')
        if mods & 0x40:
            modifiers['option']
            modline.append('⌥')
        if mods & 0x80:
            modifiers['command']
            modline.append('⌘')
        con.clear()
        con.print(modified)
        con.print(''.join(modline), justify="center")

#+end_src


** Nice!View

Consider adding this:

#+begin_src dts
&spi0_default {
    group1 {
        psels = <NRF_PSEL(SPIM_SCK,  0, 2)>
              , <NRF_PSEL(SPIM_MOSI, 0, 3)>
              , <NRF_PSEL(SPIM_MISO, 0, 1)>
              ;
    };
};
&spi0_sleep {
    group1 {
        psels = <NRF_PSEL(SPIM_SCK,  0, 2)>
              , <NRF_PSEL(SPIM_MOSI, 0, 3)>
              , <NRF_PSEL(SPIM_MISO, 0, 1)>
              ;
        low-power-enable;
    };
};
&nice_view_spi {
    cs-gpios = <&gpio0 0 GPIO_ACTIVE_HIGH>;
};
#+end_src

