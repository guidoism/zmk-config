For some reason I have two keymap files: 
 - config/andean-condor.keymap
 - config/boards/shields/andean-condor/andean-condor.keymap

TODO:
 - [ ] CAGS/⌃⌥⌘⇧ for homework mods based off of [[https://precondition.github.io/home-row-mods#cags][this blog post]]
 - [ ] Combo for f and j to turn on caps word
 - [ ] Hotkey to show all windows on Mac (mission control?)
 

REMEMBER: Need to tangle before I build too
 
#+name: generate_zmk_config
#+begin_src python :var layout=parse_layout() :results none
# Only write to the keymap in the config directory (ignore the one in board/shield)
f = open('/Users/guido/Repositories/Experiments/2023-01-18.andean-condor/zmk-config-condor-nicenano/config/andean-condor.keymap', 'w')
f.write(layout)
#+end_src

* Run this
#+begin_src sh
alias keymap='/Users/guido/homebrew/bin/keymap'
alias cairosvg='/Users/guido/homebrew/bin/cairosvg'
keymap -c pretty/keymap_drawer.config.yaml parse -c 12 -z config/andean-condor.keymap > pretty/draw.yaml
python pretty/seperate_layers.py
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.0.yaml > pretty/layer.0.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.1.yaml > pretty/layer.1.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.2.yaml > pretty/layer.2.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.3.yaml > pretty/layer.3.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.4.yaml > pretty/layer.4.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.5.yaml > pretty/layer.5.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.6.yaml > pretty/layer.6.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.7.yaml > pretty/layer.7.svg
keymap -c pretty/keymap_drawer.config.yaml draw --qmk-info-json=pretty/flat-layout-divided.json pretty/draw.8.yaml > pretty/layer.8.svg
cairosvg pretty/layer.0.svg -b white -o pretty/layer.0.png
cairosvg pretty/layer.1.svg -b white -o pretty/layer.1.png
cairosvg pretty/layer.2.svg -b white -o pretty/layer.2.png
cairosvg pretty/layer.3.svg -b white -o pretty/layer.3.png
cairosvg pretty/layer.4.svg -b white -o pretty/layer.4.png
cairosvg pretty/layer.5.svg -b white -o pretty/layer.5.png
cairosvg pretty/layer.6.svg -b white -o pretty/layer.6.png
cairosvg pretty/layer.7.svg -b white -o pretty/layer.7.png
cairosvg pretty/layer.8.svg -b white -o pretty/layer.8.png
#+end_src

#+RESULTS:



* Layout

#+name: layout
#+begin_src keymap :tangle layout.txt
 ╭────────────────────────────────────────────────────────────────╮
 │TAB   q    w    e    r    t        y    u    i    o    p    BS  │
 │CTL   a    s    d   ⇧f    g        h   ⇧j    k    l   :;    RET │
0│SFT   z    x    c    v    b        n    m    ,    .    /    ;   │
 │                    M₄   M₅        3   CTL                      │
 │          OPT  CMD  M₁   M₃       SFT   ␣   M₂   M₈             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ ~    !    @    #    $    %        ^    7    8    9    °    BS  │
 │ ◌    "    &    *    _    0        +    4    5    6    '    |   │
1│ ◌    ◌    ◌    =    -    .        ◌    1    2    3    /    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   ◉    ◌        ◌    ␣    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ `    ‘    ’    “    ”    ◌        ◌    ×    ÷    ◌    ◌    BS  │
 │ ′    [    ]    (    )    ◌        ◌    -    =    ◌    ◌    \   │
2│ ″    <    >    {    }    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   ◌    ◌        ◌    ◌    ◉    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ESC  λ←   λ→   ¶←   ¶→    ◌        ◌   P↑    ↑   P↓    ◌   UND  │
 │ ◌   S←   S→   W←   W→   BEG       ◌    ←    ↓    →    ◌    ◌   │
3│ ◌    ◌    ◌    ◌    ◌    ◌        ◌   HME   ◌   END   ◌    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD  M₁    ◉        ◌    ◌    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │F11   F1   F2   F3   F4   F5      F6   F7   F8   F9   F10  KIL  │
 │F12   ∫C   ∫D   ∫S   ∫E   ∫P      Bu0  Bu1  Bu2  Bu3   ◌   SAV  │
4│ ◌    ◌    ◌    ◌    ◌    ◌        ◌   BFS  FLP  OTH   ◌    ◌   │
 │                     ◉    ◌        ◌    ◌                       │
 │          OPT  CMD   ◌   M₆!       ◌    ◌    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ ◌    ◌    ◌    ╭    ╮    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │ ◌    ─    │    ╰    ╯    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
5│ ◌    ┼    ┴    ┬    ┤    ├        ◌    ◌    ◌    ◌    ◌    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   ◌    ◌        ◌    ◌    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │M₀!   ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌   RST  │
 │ ◌   BT4  BT3  BT2  BT1  BTC       ◌    ◌    ◌    ◌    ◌   USB  │
6│ ◌    ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   ◌   M₆!       ◌    ◌    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │TAB   q    w    f    p    g        j    l    u    y    :;   BS  │
 │CTL   a    r    s    t    d        h    n    e    i    o    RET │
7│SFT   z    x    c    v    b        k    m    ,    .    /    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   M₁   M₃      SFT   ␣   M₂   M₄             │
 ╰────────────────────────────────────────────────────────────────╯
 ╭────────────────────────────────────────────────────────────────╮
 │ ◌    ◌    q    w    e    r        ◌    ◌    ◌    ◌    ◌    ◌   │
 │ ◌    ◌    a    s    d    f        ◌    ◌    ◌    ◌    ◌    ◌   │
8│ ◌    ◌    ◌    ◌    ◌    ◌        ◌    ◌    ◌    ◌    ◌    ◌   │
 │                     ◌    ◌        ◌    ◌                       │
 │          OPT  CMD   ␣    ◌        ◌    ◌    ◌    ◌             │
 ╰────────────────────────────────────────────────────────────────╯
#+end_src

* Generate Keymap File
#+name: parse_layout
#+begin_src python :var layout=layout :results output 

import re
from more_itertools import chunked
# Remove boxes
lines = [s for s in re.findall(r'\n.│([^│]+)│', layout)]
layers = list(chunked(lines, 5))
layers = ['\n'.join(l) for l in layers]

identity = {'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10',
            'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20',
            'F21', 'F22', 'F23', 'F24', 'ESC', 'TAB', 'RET', }
leftover = []
kp = {
    'CTL': 'LCTRL',
    #'SFT': 'LSHFT',
    'OPT': 'RALT', 'CMD': 'LCMD', ',': 'COMMA', '.': 'DOT',
    '␣': 'SPACE', 'BS': 'BSPC', '/': 'SLASH', '~': 'TILDE', '^': 'CARET', "'": 'SQT',
    '%': 'PERCENT', '|': 'PIPE', '_': 'UNDER', '+': 'PLUS', '"': 'DQT', '$': 'DLLR',
    '&': 'AMPS', '*': 'STAR', '@': 'AT', '!': 'EXCL', '#': 'HASH', ')': 'RPAR',
    '\\': 'BACKSLASH', '=': 'EQUAL', '}': 'RBRC', '`': 'GRAVE', '[': 'LBKT', '>': 'GT',
    '(': 'LPAR', '-': 'MINUS', ']': 'RBKT', '<': 'LT', '{': 'LBRC', ';': 'SEMI',
    '→':   'RIGHT',    '←':   'LEFT',     '↓':  'DOWN',      '↑':  'UP',
    'HME': 'HOME',     'END': 'END',      'P↑': 'PGUP',      'P↓': 'PGDN',
    'W←':  'LG(B)',    'W→':  'LG(F)',    'λ←': 'LC(LG(B))', 'λ→': 'LC(LG(F))',
    '¶←':  'LG(LBRC)', '¶→':  'LG(RBRC)', 'S←': 'LG(A)',     'S→': 'LG(E)',
    'UND': 'LC(SLASH)',
    'BEG': 'LG(M)',
    'Bu0': 'LC(LG(N0))',
    'Bu1': 'LC(LG(N1))',
    'Bu2': 'LC(LG(N2))',
    'Bu3': 'LC(LG(N3))',
    'OTH': 'LG(O)', # Other buffer (cycle buffers)
    'FLP': 'LS(LG(O))', # Flip buffer
}
changed = {
    '◌': '&none',
    '◉': '&trans',
    'M₀!': '&tog 0',
    'M₁': '&mo 1',
    'SFT': '&smart_shft',
    'M₂': '&mo 2',
    'M₃': '&mo 3',
    'M₄': '&mo 4',
    'M₅': '&mo 5',
    'M₆!': '&tog 6',
    'M₇': '&mo 7',
    'M₈': '&mo 8',
    'M₉': '&mo 9',
    'BTC': '&bt BT_CLR',
    'BT1': '&bt BT_SEL 0',
    'BT2': '&bt BT_SEL 1',
    'BT3': '&bt BT_SEL 2',
    'BT4': '&bt BT_SEL 3',
    'RST': '&sys_reset',
    'USB': '&bootloader',
    ':;': '&colonsemi',
    '⇧f': '&bhm LSFT F',
    '⇧j': '&bhm RSFT J',
    '⌘d': '&bhm LCMD D',
    '⌘k': '&bhm RCMD K',
    '⌥s': '&bhm LALT S',
    '⌥l': '&bhm RALT L',
    '⌃a': '&bhm LCTRL A',
    
    # G E N E R A L   P U N C T U A T I O N
    '°': '&degree_symbol', # U+00B0
    '′': '&prime', # U+2032
    '″': '&double_prime', # U+2033
    '–': '&en_dash', # U+2013
    '—': '&em_dash', # U+2014
    '‣': '&triangular_bullet', # U+2023
    '‘': '&left_single_quote', # U+2018
    '’': '&right_single_quote', # U+2019
    '“': '&left_double_quote', # U+201C
    '”': '&right_double_quote', # U+201D
    
    # M A T H
    '×': '&multiplication_sign', # U+00D7
    '÷': '&division_sign', # U+00F7    
    '∀': '&for_all', # U+2200
    '∃': '&there_exists', # U+2203
    '∅': '&empty_set', # U+2205
    '∈': '&element_of', # U+2208
    '∉': '&not_element_of', # U+2209
    '∎': '&qed_motherfucker', # U+220E
    '∏': '&product', # U+220F
    '∑': '&sum', # U+2211
    '∘': '&ring', # U+2218
    '∝': '&proportional', # U+221D
    '∞': '&infinity', # U+221E
    '∧': '&logical_and', # U+2227
    '∨': '&logical_or', # U+2228
    '∩': '&intersection', # U+2229
    '∪': '&union', # U+222A
    '≈': '&almost_equal', # U+2248
    '≤': '&less_than_or_equal', # U+2264
    '≥': '&greater_than_or_equal', # U+2265
    '≡': '&identical_to', # U+2261
    '≢': '&not_identical_to', # U+2262
    
    # B O X  D R A W I N G
    '╭': '&box_upperleft', # U+256D
    '╮': '&box_upperright', # U+256E
    '╯': '&box_lowerright', # U+256F
    '╰': '&box_lowerleft', # U+2570
    '─': '&box_horizontal', # U+2500
    '│': '&box_vertical', # U+2502
    '┼': '&box_middle', # U+253C
    '┴': '&box_middlebottom', # U+2534
    '┬': '&box_middletop', # U+252C
    '┤': '&box_middleright', # U+2524
    '├': '&box_middleleft', # U+251C
}

macros = {
    'KIL': ' <&macro_press &kp LCTRL>, <&macro_tap &kp X>, <&macro_release &kp LCTRL>, <&macro_tap &kp K>',
    'SAV': ' <&macro_press &kp LCTRL>, <&macro_tap &kp X &kp S>, <&macro_release &kp LCTRL>',
    'BFS': ' <&macro_press &kp LCTRL>, <&macro_tap &kp X &kp B>, <&macro_release &kp LCTRL>',
}

def f(m):
    k = m.group(1)
    if k in macros: return f'&{k}'
    if k in identity: return f'&kp {k}'
    if k in kp: return f'&kp {kp[k]}'
    if k in changed: return f'{changed[k]}'
    if k in 'abcdefghijklmnopqkrstuvwxyz': return f'&kp {k.upper()}'
    if k in '0123456789': return f'&kp N{k}'
    if k in identity: return f'&kp {k}'
    if k[0] == '∫': return f'&kp LS(LC(LA({k[1:]})))' # Meh key
    leftover.append(k)
    return f'&none'

sub = lambda s: re.sub(r'(\S+)', f, s)


print("""
/* -*- mode: dts; tab-width: 2; -*-
 ,* Copyright (c) 2021 The ZMK Contributors
 ,*
 ,* SPDX-License-Identifier: MIT
 ,*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#define HOST_OS 2
#include "../zmk-nodefree-config/helper.h"


#define DEFAULT 0
#define NUMBERS 1
#define SYMBOLS 2

// F O R E I G N
ZMK_UNICODE_SINGLE(euro_sign,             N2, N0, A, C)   // €

// G E N E R A L   P U N C T U A T I O N
ZMK_UNICODE_SINGLE(degree_symbol,         N0, N0, B, N0)  // ° 
ZMK_UNICODE_SINGLE(prime,                 N2, N0, N3, N2) // ′
ZMK_UNICODE_SINGLE(double_prime,          N2, N0, N3, N3) // ″
ZMK_UNICODE_SINGLE(en_dash,               N2, N0, N1, N3) // –
ZMK_UNICODE_SINGLE(em_dash,               N2, N0, N1, N4) // —
ZMK_UNICODE_SINGLE(triangular_bullet,     N2, N0, N2, N3) // ‣
ZMK_UNICODE_SINGLE(left_single_quote,     N2, N0, N1, N8) // ‘
ZMK_UNICODE_SINGLE(right_single_quote,    N2, N0, N1, N9) // ’
ZMK_UNICODE_SINGLE(left_double_quote,     N2, N0, N1, C)  // “
ZMK_UNICODE_SINGLE(right_double_quote,    N2, N0, N1, D)  // ”

// M A T H
ZMK_UNICODE_SINGLE(multiplication_sign,   N0, N0, D, N7)  // × 
ZMK_UNICODE_SINGLE(division_sign,         N0, N0, F, N7)  // ÷ 
ZMK_UNICODE_SINGLE(for_all,               N2, N2, N0, N0) // ∀ 
ZMK_UNICODE_SINGLE(there_exists,          N2, N2, N0, N3) // ∃ 
ZMK_UNICODE_SINGLE(empty_set,             N2, N2, N0, N5) // ∅ 
ZMK_UNICODE_SINGLE(element_of,            N2, N2, N0, N8) // ∈ 
ZMK_UNICODE_SINGLE(not_element_of,        N2, N2, N0, N9) // ∉ 
ZMK_UNICODE_SINGLE(qed_motherfucker,      N2, N2, N0, E)  // ∎ 
ZMK_UNICODE_SINGLE(product,               N2, N2, N0, F)  // ∏ 
ZMK_UNICODE_SINGLE(sum,                   N2, N2, N1, N1) // ∑ 
ZMK_UNICODE_SINGLE(ring,                  N2, N2, N1, N8) // ∘ 
ZMK_UNICODE_SINGLE(proportional,          N2, N2, N1, D)  // ∝ 
ZMK_UNICODE_SINGLE(infinity,              N2, N2, N1, E)  // ∞ 
ZMK_UNICODE_SINGLE(logical_and,           N2, N2, N2, N7) // ∧ 
ZMK_UNICODE_SINGLE(logical_or,            N2, N2, N2, N8) // ∨ 
ZMK_UNICODE_SINGLE(intersection,          N2, N2, N2, N9) // ∩ 
ZMK_UNICODE_SINGLE(union,                 N2, N2, N2, A)  // ∪ 
ZMK_UNICODE_SINGLE(almost_equal,          N2, N2, N4, N8) // ≈ 
ZMK_UNICODE_SINGLE(less_than_or_equal,    N2, N2, N6, N4) // ≤ 
ZMK_UNICODE_SINGLE(greater_than_or_equal, N2, N2, N6, N5) // ≥ 
ZMK_UNICODE_SINGLE(identical_to,          N2, N2, N6, N1) // ≡ 
ZMK_UNICODE_SINGLE(not_identical_to,      N2, N2, N6, N2) // ≢ 

// B O X  D R A W I N G
ZMK_UNICODE_SINGLE(box_upperleft,         N2, N5, N6, D)  // ╭ 
ZMK_UNICODE_SINGLE(box_upperright,        N2, N5, N6, E)  // ╮ 
ZMK_UNICODE_SINGLE(box_lowerright,        N2, N5, N6, F)  // ╯ 
ZMK_UNICODE_SINGLE(box_lowerleft,         N2, N5, N7, N0) // ╰ 
ZMK_UNICODE_SINGLE(box_horizontal,        N2, N5, N0, N0) // ─ 
ZMK_UNICODE_SINGLE(box_vertical,          N2, N5, N0, N2) // │ 
ZMK_UNICODE_SINGLE(box_middle,            N2, N5, N3, C)  // ┼ 
ZMK_UNICODE_SINGLE(box_middlebottom,      N2, N5, N3, N4) // ┴ 
ZMK_UNICODE_SINGLE(box_middletop,         N2, N5, N2, C)  // ┬ 
ZMK_UNICODE_SINGLE(box_middleright,       N2, N5, N2, N4) // ┤ 
ZMK_UNICODE_SINGLE(box_middleleft,        N2, N5, N1, C)  // ├ 

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

ZMK_COMBO(combo_caps_word, &caps_word, 17 20, ALL, 25)

/*
// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUMBERS>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUMBERS>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};
,*/



""")

parts = [
    '/ {\nmacros {',
    '\n'.join(f'ZMK_MACRO({k}, wait-ms = <30>; tap-ms = <40>; bindings = {v};)' for k, v in macros.items()),
    '};\n};',
]
print('\n'.join(parts))

print("""
/ {
    behaviors {
      colonsemi: colonsemi {
        compatible = "zmk,behavior-mod-morph";
        label = "COLONSEMI";
        #binding-cells = <0>;
        bindings = <&kp COLON>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      lh_pht: left_hand_positional_hold_tap {        // This is a certain type of homerow mod
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <6 7 8 9 10 11>;    // <---[[right-hand keys]]
      };
      hm: homerow_mods {                            // This is another way to do homerow mods
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <150>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
      bhm: balanced_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;    // <---[[moderate duration]]
        quick-tap-ms = <200>;
        //require-prior-idle-ms = <125>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
      };
   };
};
""")

parts = [
    '/ {\nkeymap {\ncompatible = "zmk,keymap"; ',
    '\n\n'.join(f'{i}_layer {{\n bindings = <\n {sub(s)} \n>;\n}};' for i, s in enumerate(layers)),
    '};\n};',
]
print('\n'.join(parts))


#print()
if leftover:
    print(list(leftover))

#+end_src


* Layer Status Viewer

This is what discotool json returns for each device:

{'manufacturer': 'ZMK Project',
  'name': 'Andean Condor',
  'ports': [{'dev': '/dev/cu.usbmodem2301', 'iface': ''}],
  'product_id': 24926,
  'serial_num': '23C7B91420F266DF',
  'usb_location': '0x02300000',
  'vendor_id': 7504,
  'version': '',
  'volumes': []}]


#+name: status.py
#+begin_src python :tangle status.py :results value pp
import json, subprocess, serial, re, rich, rich.console, os
from copy import copy
updated = os.stat('layout.txt').st_mtime
from pprint import pprint as pp
from more_itertools import chunked
layers = list(chunked(open('layout.txt').read().split('\n'), 7))
layers = ['\n'.join(l) for l in layers]
layers = [re.sub(r'([│╰╯─╭╮]+)', r'[bold turquoise2]\1[/]', layer) for layer in layers]
layers = [re.sub(r'([◉◌])', r'[dim]\1[/]', layer) for layer in layers]

modifiers = {
    'shift': {
        ' ([abcdefghijklmnopqrstuvwxyz]) ': lambda m: f' {m.group(1).upper()} ',
    },
    'command': {
    },
    'control': {},
    'option': {},
}

# Cool colors:
#    [cyan]
#    [bold cyan]
#    [bold magenta1]
#    [bold green1]
#    [bold turquoise2]
#    [turquoise2]

def msb(n):
    "What is the most significant bit set (also, what is the highest layer set)"
    if not n:
        return 0
    i = 0
    while n:
        n = n >> 1
        i += 1
    return i - 1

p = subprocess.run(['/Users/guido/miniforge3/bin/discotool', 'json'], capture_output=True)
devs = json.loads(p.stdout)
path = [d['ports'][0]['dev'] for d in devs if '23C7B91420F266DF' == d['serial_num']][0]
ser = serial.Serial(path)
con = rich.console.Console(highlight=False)
con.show_cursor(False)
layer = ''
shortcuts = {
    'C-:    ': 'avy-goto-char',
    'C-h m  ': 'describe-mode',
    'C-h k  ': 'describe-key',
    'C-h i  ': 'info',
    'C-h l  ': 'view-lossage',
    'C-x C-x': 'exchange-point-and-mark',
    'C-c ←  ': 'winner-undo',
    'M-o    ': 'other-window',
    'C-c M-o': 'comint-clear-buffer',
}

while s := ser.readline():
    # zmk: set_layer_state: layer_changed: layer 3 state 0
    # GUIDO: layer 4, new state set: 16
    if m := re.search(r'GUIDO: layer (\d+), new state set: (\d+)', s.decode()):
        state = int(m.group(2))
        n = msb(state)
        layer = layers[n]
        con.clear()
        con.print(layer)

        if os.stat('layout.txt').st_mtime > updated:
            updated = os.stat('layout.txt').st_mtime
            layers = json.load(open('layout.txt'))

    if m := re.search(r'GUIDO: Modifiers set to 0x(\d\d)', s.decode()):
        mods = int(m.group(1), 16)

        modified = copy(layer)
        modline = []
        
        if mods & 0x01:
            modifiers['control']
            modline.append('^')
        if mods &0x02:
            for a, b in modifiers['shift'].items():
                modified = re.sub(a, b, modified)
            modline.append('⇧')
        if mods & 0x04:
            modifiers['option']
            modline.append('⌥')
        if mods & 0x08:
            modifiers['command']
            modline.append('⌘')
        if mods & 0x10:
            modifiers['control']
            modline.append('^')
        if mods &0x20:
            modifiers['shift']
            modline.append('⇧')
        if mods & 0x40:
            modifiers['option']
            modline.append('⌥')
        if mods & 0x80:
            modifiers['command']
            modline.append('⌘')
        con.clear()
        con.print(modified)
        if modline:
            con.print(''.join(modline), justify="center")
        else:
            con.print('---', justify="center")
    else:
        con.print('---', justify="center")

    con.print('\n'.join((f'{k}  {v}' for k, v in shortcuts.items())))
#+end_src


** Nice!View

Consider adding this:

#+begin_src dts
&spi0_default {
    group1 {
        psels = <NRF_PSEL(SPIM_SCK,  0, 2)>
              , <NRF_PSEL(SPIM_MOSI, 0, 3)>
              , <NRF_PSEL(SPIM_MISO, 0, 1)>
              ;
    };
};
&spi0_sleep {
    group1 {
        psels = <NRF_PSEL(SPIM_SCK,  0, 2)>
              , <NRF_PSEL(SPIM_MOSI, 0, 3)>
              , <NRF_PSEL(SPIM_MISO, 0, 1)>
              ;
        low-power-enable;
    };
};
&nice_view_spi {
    cs-gpios = <&gpio0 0 GPIO_ACTIVE_HIGH>;
};
#+end_src

** Pretty text-mode experiments

#+name: pretty_text_mode_layout
#+begin_src python :var layout=layout :results output
import re
print(list(re.findall(r'( ╭─.+?─╯)', layout, re.DOTALL))[0])
#+end_src

#+RESULTS: pretty_text_mode_layout
:  ╭────────────────────────────────────────────────────────────────╮
:  │TAB   q    w    e    r    t        y    u    i    o    p    BS  │
:  │CTL   a    s    d    f    g        h    j    k    l    :;   RET │
: 0│SFT   z    x    c    v    b        n    m    ,    .    /    ;   │
:  │                    M₄   M₅        3   CTL                      │
:  │          OPT  CMD  M₁   M₃       SFT   ␣   M₂   ∫N4            │
:  ╰────────────────────────────────────────────────────────────────╯

** Urob Git Stuff

#+begin_example
∇ git fetch urob
git fetch urob
remote: Enumerating objects: 4196, done.        
remote: Counting objects: 100% (2380/2380), done.        
remote: Compressing objects: 100% (44/44), done.        
remote: Total 4196 (delta 2341), reused 2357 (delta 2335), pack-reused 1816        
Receiving objects: 100% (4196/4196), 2.51 MiB | 13.06 MiB/s, done.
Resolving deltas: 100% (3305/3305), completed with 520 local objects.
From https://github.com/urob/zmk
 * [new branch]        adv360                         -> urob/adv360
 * [new branch]        adv360-led                     -> urob/adv360-led
 * [new branch]        build-with-submodules          -> urob/build-with-submodules
 * [new branch]        fix-mod-morph                  -> urob/fix-mod-morph
 * [new branch]        ignore-mods-for-capsword       -> urob/ignore-mods-for-capsword
 * [new branch]        improve-caps-word              -> urob/improve-caps-word
 * [new branch]        main                           -> urob/main
 * [new branch]        main-3.0                       -> urob/main-3.0
 * [new branch]        main-3.2                       -> urob/main-3.2
 * [new branch]        masked-mods                    -> urob/masked-mods
 * [new branch]        masked-mods-pr                 -> urob/masked-mods-pr
 * [new branch]        mouse-3.2                      -> urob/mouse-3.2
 * [new branch]        positional-hold-tap-on-release -> urob/positional-hold-tap-on-release
 * [new branch]        testing                        -> urob/testing
 * [new branch]        zen-tweaks                     -> urob/zen-tweaks

 ∇ git checkout -b urob-main urob/main
git checkout -b urob-main urob/main
branch 'urob-main' set up to track 'urob/main'.
Switched to a new branch 'urob-main'

∇ git ls-remote --get-url 
git ls-remote --get-url 
https://github.com/urob/zmk

∇ git checkout -b urob-guidoism
git checkout -b urob-guidoism
Switched to a new branch 'urob-guidoism'

∇ git remote set-url origin https://github.com/guidoism/zmk
git remote set-url origin https://github.com/guidoism/zmk

∇ git push origin urob-guidoism
git push origin urob-guidoism
Enumerating objects: 3892, done.
Counting objects: 100% (3891/3891), done.
Delta compression using up to 8 threads
Compressing objects: 100% (1050/1050), done.
Writing objects: 100% (3178/3178), 836.34 KiB | 6.48 MiB/s, done.
Total 3178 (delta 2545), reused 2696 (delta 2113), pack-reused 0
remote: Resolving deltas: 100% (2545/2545), completed with 413 local objects.        
remote: 
remote: Create a pull request for 'urob-guidoism' on GitHub by visiting:        
remote:      https://github.com/guidoism/zmk/pull/new/urob-guidoism        
remote: 
To https://github.com/guidoism/zmk
 * [new branch]        urob-guidoism -> urob-guidoism

#+end_example
